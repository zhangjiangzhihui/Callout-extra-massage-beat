/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  CalloutMessageView: () => CalloutMessageView,
  default: () => CalloutExtraMessagePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  currentSceneId: "default",
  scenes: [{
    id: "default",
    name: "\u9ED8\u8BA4\u573A\u666F",
    callouts: []
  }],
  iconSettings: {
    type: 1,
    size: 24,
    position: {
      top: 8,
      right: 16
    }
  },
  isActivated: false,
  licenseKey: "",
  _lastInstallTime: Date.now(),
  hasUsedTrial: false,
  trialEndTime: null,
  showGlobalIcons: true,
  // 添加这一行，默认显示图标
  usePrismStyle: false,
  // 添加这一行
  showCalloutIcon: true,
  messages: {}
};
var CALL_OUT_MESSAGE_VIEW = "callout-message-view";
var CalloutExtraMessagePlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.reopenCurrentNote = async () => {
      var _a, _b;
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!activeView)
        return;
      const currentFile = activeView.file;
      if (!currentFile)
        return;
      const isInEditMode = activeView.getMode() === "source";
      const scrollInfo = (_a = activeView.currentMode) == null ? void 0 : _a.getScroll();
      const cursor = isInEditMode ? (_b = activeView.editor) == null ? void 0 : _b.getCursor() : null;
      await this.app.commands.executeCommandById("workspace:close");
      return new Promise((resolve) => {
        setTimeout(async () => {
          try {
            const leaf = this.app.workspace.getLeaf(true);
            await leaf.openFile(currentFile);
            setTimeout(async () => {
              if (isInEditMode) {
                await leaf.setViewState({
                  type: "markdown",
                  state: { mode: "source" }
                });
              } else {
                await leaf.setViewState({
                  type: "markdown",
                  state: { mode: "preview" }
                });
              }
              const newView = leaf.view;
              if (scrollInfo) {
                setTimeout(() => {
                  var _a2;
                  (_a2 = newView.currentMode) == null ? void 0 : _a2.applyScroll(scrollInfo);
                }, 100);
              }
              if (isInEditMode && cursor && newView.editor) {
                newView.editor.setCursor(cursor);
              }
              this.app.workspace.setActiveLeaf(leaf);
              resolve();
            }, 100);
          } catch (error) {
            console.error("\u91CD\u65B0\u6253\u5F00\u6587\u4EF6\u5931\u8D25:", error);
            new import_obsidian.Notice("\u91CD\u65B0\u6253\u5F00\u6587\u4EF6\u5931\u8D25");
            resolve();
          }
        }, 100);
      });
    };
  }
  async onload() {
    await this.loadSettings();
    this.togglePrismStyle(this.settings.usePrismStyle);
    this.addSettingTab(new CalloutMessageSettingTab(this.app, this));
    const hasPermission = await this.checkActivation();
    if (hasPermission) {
      this.messageIconObserver = new MutationObserver((mutations) => {
        this.handleDOMChanges(mutations);
      });
      this.registerView(
        CALL_OUT_MESSAGE_VIEW,
        (leaf) => new CalloutMessageView(leaf, this)
      );
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", () => {
          this.startObserving();
        })
      );
      this.registerEvent(
        this.app.workspace.on("file-open", () => {
          this.startObserving();
        })
      );
      this.addCommand({
        id: "transform-to-callout",
        name: "\u5C06\u9009\u4E2D\u6587\u672C\u8F6C\u6362\u4E3A Callout",
        editorCallback: (editor) => {
          this.transformToCallout(editor);
        }
      });
      this.addCommand({
        id: "refresh-callout-messages",
        name: "\u5237\u65B0 Callout \u5907\u6CE8",
        checkCallback: (checking) => {
          var _a;
          const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
          if (!activeView)
            return false;
          if (!checking) {
            try {
              const callouts = activeView.contentEl.querySelectorAll(".callout");
              callouts.forEach((callout) => {
                if (callout instanceof HTMLElement) {
                  this.updateCalloutMessageCount(callout);
                }
              });
              const messageView = (_a = this.app.workspace.getLeavesOfType(CALL_OUT_MESSAGE_VIEW)[0]) == null ? void 0 : _a.view;
              if (messageView) {
                messageView.refreshView();
              }
              new import_obsidian.Notice("Callout \u5907\u6CE8\u5DF2\u5237\u65B0");
            } catch (error) {
              console.error("\u5237\u65B0\u5931\u8D25:", error);
              new import_obsidian.Notice("\u5237\u65B0\u5931\u8D25\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0\u4E86\u89E3\u8BE6\u60C5");
            }
          }
          return true;
        }
      });
      this.registerContextMenu();
      this.addRibbonIcon(
        "message-circle",
        "Callout \u5907\u6CE8",
        async () => {
          const existingLeaves = this.app.workspace.getLeavesOfType(CALL_OUT_MESSAGE_VIEW);
          if (existingLeaves.length > 0) {
            this.app.workspace.revealLeaf(existingLeaves[0]);
          } else {
            const leaf = this.app.workspace.getRightLeaf(false);
            await leaf.setViewState({
              type: CALL_OUT_MESSAGE_VIEW,
              active: true
            });
            this.app.workspace.revealLeaf(leaf);
          }
        }
      );
      this.addRibbonIcon(
        "list",
        "\u663E\u793A\u6240\u6709 Callout \u7B14\u8BB0",
        async () => {
          const existingLeaves = this.app.workspace.getLeavesOfType(CALL_OUT_MESSAGE_VIEW);
          let leaf;
          if (existingLeaves.length > 0) {
            leaf = existingLeaves[0];
          } else {
            leaf = this.app.workspace.getRightLeaf(false);
            if (leaf) {
              await leaf.setViewState({
                type: CALL_OUT_MESSAGE_VIEW,
                active: true
              });
            }
          }
          if (leaf) {
            this.app.workspace.revealLeaf(leaf);
            const messageView = leaf.view;
            messageView.switchToAllMode();
          }
        }
      );
      this.startObserving();
    }
    this.registerEvent(
      this.app.workspace.on("css-change", () => {
        this.updateCalloutIconVisibility();
      })
    );
    this.updateCalloutIconVisibility();
  }
  async onunload() {
    const leaves = this.app.workspace.getLeavesOfType(CALL_OUT_MESSAGE_VIEW);
    for (const leaf of leaves) {
      await leaf.detach();
    }
  }
  // 处理 DOM 变化的新方法
  handleDOMChanges(mutations) {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!markdownView || !markdownView.file)
      return;
    const file = markdownView.file;
    const cache = this.app.metadataCache.getFileCache(file);
    const frontmatter = cache == null ? void 0 : cache.frontmatter;
    const globalIconsEnabled = this.settings.showGlobalIcons;
    const frontmatterDisplay = frontmatter == null ? void 0 : frontmatter["Callout extra message display"];
    let shouldShowIcons = false;
    if (!globalIconsEnabled) {
      shouldShowIcons = frontmatterDisplay === "Yes";
    } else {
      shouldShowIcons = frontmatterDisplay !== "No";
    }
    if (!shouldShowIcons) {
      const existingIcons = markdownView.contentEl.querySelectorAll(".callout-message-icon-container");
      existingIcons.forEach((icon) => icon.remove());
      return;
    }
    for (const mutation of mutations) {
      const addedNodes = Array.from(mutation.addedNodes);
      for (const node of addedNodes) {
        if (node instanceof HTMLElement) {
          const callouts = node.querySelectorAll(".callout");
          callouts.forEach((callout) => {
            if (callout instanceof HTMLElement && !callout.querySelector(".callout-message-icon")) {
              this.addMessageIconToCallout(callout);
            }
          });
        }
      }
    }
  }
  // 修改 addMessageIconToCallout 方法
  addMessageIconToCallout(callout) {
    var _a, _b;
    const existingContainer = callout.querySelector(".callout-message-icon-container");
    if (existingContainer) {
      const calloutId2 = this.getCalloutId(callout);
      const messageData2 = this.settings.messages[calloutId2];
      const messageCount2 = ((_a = messageData2 == null ? void 0 : messageData2.messages) == null ? void 0 : _a.length) || 0;
      const countSpan2 = existingContainer.querySelector(".callout-message-count");
      if (countSpan2) {
        countSpan2.textContent = messageCount2.toString();
      }
      return;
    }
    const iconContainer = document.createElement("div");
    iconContainer.className = "callout-message-icon-container";
    const icon = document.createElement("div");
    icon.className = "callout-message-icon";
    icon.innerHTML = this.getIconSvg(this.settings.iconSettings.type);
    icon.title = "\u70B9\u51FB\u6DFB\u52A0\u6216\u7F16\u8F91\u6D88\u606F";
    callout.style.setProperty("--icon-size", `${this.settings.iconSettings.size}px`);
    callout.style.setProperty("--icon-top-position", `${this.settings.iconSettings.position.top}px`);
    callout.style.setProperty("--icon-right-position", `${this.settings.iconSettings.position.right}px`);
    icon.style.width = `${this.settings.iconSettings.size}px`;
    icon.style.height = `${this.settings.iconSettings.size}px`;
    iconContainer.style.top = `${this.settings.iconSettings.position.top}px`;
    iconContainer.style.right = `${this.settings.iconSettings.position.right}px`;
    icon.addEventListener("click", async (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (!await this.checkActivation())
        return;
      const calloutId2 = this.getCalloutId(callout);
      this.showMessageInput(callout);
    });
    iconContainer.appendChild(icon);
    const calloutId = this.getCalloutId(callout);
    const messageData = this.settings.messages[calloutId];
    const messageCount = ((_b = messageData == null ? void 0 : messageData.messages) == null ? void 0 : _b.length) || 0;
    const countSpan = document.createElement("span");
    countSpan.className = "callout-message-count";
    countSpan.textContent = messageCount.toString();
    countSpan.addEventListener("click", async (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (!await this.checkActivation())
        return;
      const calloutId2 = this.getCalloutId(callout);
      let messageView = null;
      const existingLeaves = this.app.workspace.getLeavesOfType(CALL_OUT_MESSAGE_VIEW);
      if (existingLeaves.length > 0) {
        const leaf = existingLeaves[0];
        messageView = leaf.view;
        if (messageView) {
          messageView.switchToSingleMode(calloutId2);
        }
        this.app.workspace.revealLeaf(leaf);
      } else {
        const leaf = this.app.workspace.getRightLeaf(false);
        await leaf.setViewState({
          type: CALL_OUT_MESSAGE_VIEW,
          active: true
        });
        this.app.workspace.revealLeaf(leaf);
        messageView = leaf.view;
        if (messageView) {
          messageView.switchToSingleMode(calloutId2);
        }
      }
    });
    iconContainer.appendChild(countSpan);
    callout.appendChild(iconContainer);
    callout.style.position = "relative";
  }
  // 修改 updateCalloutMessageCount 方法
  updateCalloutMessageCount(callout) {
    var _a;
    const calloutId = this.getCalloutId(callout);
    const messageData = this.settings.messages[calloutId];
    const messageCount = ((_a = messageData == null ? void 0 : messageData.messages) == null ? void 0 : _a.length) || 0;
    const container = callout.querySelector(".callout-message-icon-container");
    if (container instanceof HTMLElement) {
      const countSpan = container.querySelector(".callout-message-count");
      if (countSpan) {
        countSpan.textContent = messageCount.toString();
      }
    }
  }
  // 弹框显示输入容
  async showMessageInput(callout) {
    if (!await this.checkActivation())
      return;
    const calloutId = this.getCalloutId(callout);
    const savedMessage = this.settings.messages[calloutId] || "";
    const modal = new MessageInputModal(this.app, this, calloutId);
    modal.open();
  }
  // 获取 callout 的 ID，用于保存消息
  getCalloutId(callout) {
    var _a;
    const footnote = (_a = callout.querySelector("span")) == null ? void 0 : _a.getAttribute("data-callout-id");
    if (footnote) {
      return footnote;
    }
    const timestamp = Date.now();
    const randomStr = Math.random().toString(36).substring(2, 8);
    const newId = `callout-${timestamp}-${randomStr}`;
    const span = callout.querySelector("span");
    if (span) {
      span.setAttribute("data-callout-id", newId);
    }
    return newId;
  }
  // 加载插件设
  async loadSettings() {
    const savedData = await this.loadData();
    if (!savedData) {
      this.settings = Object.assign({}, DEFAULT_SETTINGS);
      this.settings._lastInstallTime = Date.now();
      this.settings.hasUsedTrial = false;
      this.settings.trialEndTime = null;
      new import_obsidian.Notice("\u68C0\u6D4B\u5230\u63D2\u9996\u6B21\u5B89\u88C5\u6216\u91CD\u65B0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u88C5\uFF0C\u5DF2\u542F\u7528\u8BD5\uFFFD\uFFFD\uFFFD\uFFFD\u529F\uFFFD\uFFFD");
      await this.saveSettings();
      return;
    }
    this.settings = Object.assign({}, DEFAULT_SETTINGS, savedData);
    await this.saveSettings();
  }
  // 存插件设置
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // 添加侧边栏图标
  addSidebarIcon() {
    const sidebarIconEl = this.addRibbonIcon(
      "message-circle",
      // 使用一致标
      "Open Callout Extra Message",
      () => {
        this.activateView();
      }
    );
    sidebarIconEl.addClass("callout-sidebar-icon");
  }
  // 激活自定义视图
  async activateView() {
    const existingLeaves = this.app.workspace.getLeavesOfType(CALL_OUT_MESSAGE_VIEW);
    let leaf;
    if (existingLeaves.length > 0) {
      leaf = existingLeaves[0];
    } else {
      if (!this.app.workspace.getRightLeaf(false)) {
        await this.app.workspace.getRightLeaf(true);
      }
      const rightSplit = this.app.workspace.getRightLeaf(false);
      if (rightSplit) {
        leaf = rightSplit;
        await leaf.setViewState({
          type: CALL_OUT_MESSAGE_VIEW,
          active: true
        });
      } else {
        new import_obsidian.Notice("\u65E0\u6CD5\u521B\u5EFA\u89C6\u56FE");
        return;
      }
    }
    if (leaf.view instanceof CalloutMessageView) {
      leaf.view.getIcon = () => "message-circle";
      leaf.view.getDisplayText = () => "Callout \u5907\u6CE8";
    }
    this.app.workspace.revealLeaf(leaf);
    if (leaf.view instanceof CalloutMessageView) {
      leaf.view.displayMessages();
    }
  }
  // 注册 Transform to Callout 命令
  async transformToCallout(editor, calloutIndex = 0) {
    if (!await this.checkActivation())
      return;
    const selection = editor.getSelection();
    if (!selection) {
      new import_obsidian.Notice("\u8BF7\u5148\u9009\u62E9\u8981\u8F6C\u6362\u7684\u6587\u672C");
      return;
    }
    const currentScene = this.settings.scenes.find(
      (scene) => scene.id === this.settings.currentSceneId
    );
    if (!currentScene || !currentScene.callouts[calloutIndex]) {
      new import_obsidian.Notice("\u672A\u627E\u5230\u5BF9\u5E94\u7684 Callout \u914D\u7F6E");
      return;
    }
    const callout = currentScene.callouts[calloutIndex];
    const timestamp = Date.now();
    const randomStr = Math.random().toString(36).substr(2, 6);
    const calloutId = `callout-${timestamp}-${randomStr}`;
    editor.replaceSelection(`<font color="${callout.textColor}">${selection}</font>`);
    const coloredText = editor.getSelection();
    const formattedText = `> [!${callout.type}] **<font color="${callout.color}">${callout.name}</font>**
> <span style="background:${callout.color}" data-callout-id="${calloutId}"><font color="${callout.textColor}">${coloredText}</font></span>

`;
    editor.replaceSelection(formattedText);
    new import_obsidian.Notice(`\u6587\u672C\u5DF2\u8F6C\u6362\u4E3A ${callout.name} \u683C\uFF01`);
  }
  // 获取当前编辑器实��
  getEditor() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView)
      return null;
    const editor = activeView.editor;
    return editor;
  }
  // 获取当前选中本
  getSelectedText(editor) {
    if (!editor.getSelection()) {
      this.selectLineUnderCursor(editor);
    }
    return editor.getSelection();
  }
  // 如果没有本选中，则选择光标所在行
  selectLineUnderCursor(editor) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    editor.setSelection(
      { line: cursor.line, ch: 0 },
      { line: cursor.line, ch: line.length }
    );
  }
  // 观察 DOM 变
  async startObserving() {
    var _a;
    (_a = this.messageIconObserver) == null ? void 0 : _a.disconnect();
    if (!await this.checkActivation()) {
      return;
    }
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!markdownView || !markdownView.file)
      return;
    const file = markdownView.file;
    const cache = this.app.metadataCache.getFileCache(file);
    const frontmatter = cache == null ? void 0 : cache.frontmatter;
    const globalIconsEnabled = this.settings.showGlobalIcons;
    const frontmatterDisplay = frontmatter == null ? void 0 : frontmatter["Callout extra message display"];
    let shouldShowIcons = false;
    if (!globalIconsEnabled) {
      shouldShowIcons = frontmatterDisplay === "Yes";
    } else {
      shouldShowIcons = frontmatterDisplay !== "No";
    }
    const contentEl = markdownView.contentEl;
    if (!shouldShowIcons) {
      const existingIcons = contentEl.querySelectorAll(".callout-message-icon-container");
      existingIcons.forEach((icon) => icon.remove());
      return;
    }
    this.messageIconObserver.observe(contentEl, {
      childList: true,
      subtree: true
    });
    const callouts = contentEl.querySelectorAll(".callout");
    callouts.forEach((callout) => {
      if (callout instanceof HTMLElement) {
        this.addMessageIconToCallout(callout);
      }
    });
  }
  // 添加一个新方法来更新所有打开的笔记
  updateAllOpenNotes() {
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    leaves.forEach((leaf) => {
      const view = leaf.view;
      if (view instanceof import_obsidian.MarkdownView) {
        this.startObserving();
      }
    });
  }
  registerContextMenu() {
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        menu.addItem((item) => {
          item.setTitle("\u6211\u7684\u7B14\u8BB0\u7C7B\u578B").setIcon("quote-glyph").setSection("a-my-notes").onClick(async () => {
            if (!await this.checkActivation())
              return;
            const modal = new CalloutSelectionModal(this.app, this, editor);
            modal.open();
          });
        });
        menu.addSeparator();
      })
    );
  }
  async validateLicense(key) {
    const validLicenseKey = "L9Z3-KJ2V-P4A6-QT1Y-M5B0-R8N7-DX3W-H6U9-FC0M-V2G1";
    const cleanInput = key.replace(/[\s-]/g, "");
    const cleanValid = validLicenseKey.replace(/[\s-]/g, "");
    return cleanInput === cleanValid;
  }
  // 修�����插件功能方法，添加授权检查
  async checkActivation() {
    if (this.settings.licenseKey && await this.validateLicense(this.settings.licenseKey)) {
      return true;
    }
    if (this.settings.trialEndTime) {
      const now = Date.now();
      if (now < this.settings.trialEndTime) {
        return true;
      } else {
        this.settings.trialEndTime = null;
        await this.saveSettings();
        this.disablePluginFeatures();
        return false;
      }
    }
    return false;
  }
  updateMessageCount(callout, container) {
    var _a;
    const calloutId = this.getCalloutId(callout);
    const messageData = this.settings.messages[calloutId];
    const messageCount = ((_a = messageData == null ? void 0 : messageData.messages) == null ? void 0 : _a.length) || 0;
    const countSpan = container.querySelector(".callout-message-count");
    if (countSpan) {
      countSpan.textContent = messageCount.toString();
    }
  }
  // 在 CalloutMessagePlugin 类中添加禁用功能的方法
  disablePluginFeatures() {
    var _a;
    (_a = this.messageIconObserver) == null ? void 0 : _a.disconnect();
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (markdownView) {
      const icons = markdownView.contentEl.querySelectorAll(".callout-message-icon-container");
      icons.forEach((icon) => icon.remove());
    }
    this.app.workspace.detachLeavesOfType(CALL_OUT_MESSAGE_VIEW);
    this.app.workspace.trigger("editor-menu");
    const commandId = "transform-to-callout";
    if (this.app.commands.commands[commandId]) {
      delete this.app.commands.commands[commandId];
    }
  }
  getIconSvg(type) {
    const icons = {
      1: '<svg t="1733304888910" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2829" width="200" height="200"><path d="M507.297959 862.040816c-52.244898 0-102.922449-9.404082-151.510204-27.689796l-116.506122 25.6c-24.032653 5.22449-46.497959 0-60.604082-14.628571-14.628571-14.628571-19.853061-36.571429-14.628571-60.604082l17.240816-77.844898c-43.363265-57.469388-66.35102-122.77551-66.35102-190.693877C114.938776 320.783673 291.004082 161.959184 507.297959 161.959184c107.62449 0 208.457143 36.04898 283.689796 101.877551C867.265306 330.710204 909.061224 420.04898 909.061224 516.179592c0 190.693878-180.244898 345.861224-401.763265 345.861224z" fill="#7BD4EF" p-id="2830"></path><path d="M512 581.485714c-38.138776 0-69.485714-31.346939-69.485714-69.485714s31.346939-69.485714 69.485714-69.485714 69.485714 31.346939 69.485714 69.485714-31.346939 69.485714-69.485714 69.485714zM710.530612 581.485714c-38.138776 0-69.485714-31.346939-69.485714-69.485714s31.346939-69.485714 69.485714-69.485714 69.485714 31.346939 69.485715 69.485714-31.346939 69.485714-69.485715 69.485714zM313.469388 581.485714c-38.138776 0-69.485714-31.346939-69.485715-69.485714s31.346939-69.485714 69.485715-69.485714 69.485714 31.346939 69.485714 69.485714-31.346939 69.485714-69.485714 69.485714z" fill="#278DCA" p-id="2831"></path></svg>',
      2: '<svg t="1733305164756" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4084" width="200" height="200"><path d="M913.33 144.15v577.57H590.85c-8.94 0-17.41 2.58-24.58 7.12L304.72 854.97v-87.24c0-25.41-20.6-46-46-46H109.33V144.15h804m25.42-46H83.92c-11.37 0-20.58 9.22-20.58 20.58v628.41c0 11.37 9.22 20.58 20.58 20.58h174.8v160.49L591.17 767.9l-0.31-0.18h347.9c11.37 0 20.58-9.22 20.58-20.58v-628.4c-0.01-11.37-9.22-20.59-20.59-20.59z" fill="#5BE7C4" p-id="4085"></path><path d="M720.54 468.51H302.12c-12.7 0-23-10.3-23-23s10.3-23 23-23h418.42c12.7 0 23 10.3 23 23s-10.29 23-23 23z" fill="#7A57D1" p-id="4086"></path><path d="M511.33 677.72c-12.7 0-23-10.3-23-23V236.3c0-12.7 10.3-23 23-23s23 10.3 23 23v418.42c0 12.71-10.29 23-23 23z" fill="#7A57D1" p-id="4087"></path><path d="M745.81 200.71h-41.97c-6.63 0-12-5.37-12-12s5.37-12 12-12h41.97c6.63 0 12 5.37 12 12s-5.37 12-12 12zM861.39 351.81c-6.63 0-12-5.37-12-12V227.37c0-14.7-11.96-26.67-26.67-26.67h-24.38c-6.63 0-12-5.37-12-12s5.37-12 12-12h24.38c27.94 0 50.67 22.73 50.67 50.67v112.44c0 6.63-5.38 12-12 12z" fill="#5BE7C4" p-id="4088"></path></svg>',
      3: '<svg t="1733305183783" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4249" width="200" height="200"><path d="M892.84 410.07H459.97c-9.21 0-16.67 7.44-16.67 16.63v333c0 9.22 7.46 16.63 16.67 16.63h266.38l116.54 66.63v-66.63h49.95c9.21 0 16.67-7.41 16.67-16.63v-333c0-9.19-7.46-16.63-16.67-16.63z" fill="#EC87C0" p-id="4250"></path><path d="M459.97 410.07c-9.21 0-16.67 7.44-16.67 16.63v216.47h249.75c9.21 0 16.67-7.46 16.67-16.68V410.07H459.97z" fill="#D770AD" p-id="4251"></path><path d="M659.76 176.96H126.95c-9.21 0-16.63 7.46-16.63 16.66v399.61c0 9.17 7.43 16.63 16.63 16.63h49.95v99.9l179.81-99.9h303.05c9.18 0 16.63-7.46 16.63-16.63V193.62c0.01-9.2-7.44-16.66-16.63-16.66z" fill="#AC92EB" p-id="4252"></path><path d="M448.87 276.86c-21.74 0-41.4 8.94-55.5 23.33-14.11-14.39-33.76-23.33-55.51-23.33-42.9 0-77.69 34.79-77.69 77.7 0 88.8 133.2 166.48 133.2 166.48s133.19 77.68 133.19 166.48c0 42.91-34.78 77.7-77.69 77.7z" fill="#F5F7FA" p-id="4253"></path><path d="M448.87 276.86c-5.72 0-11.29 0.63-16.66 1.81 34.91 7.62 61.06 38.69 61.06 75.9 0 69.17-80.83 131.61-116.56 155.82 10.15 6.88 16.66 10.66 16.66 10.66s133.19-77.68 133.19-166.48c0-42.92-34.78-77.71-77.69-77.71z" opacity=".1" p-id="4254"></path></svg>',
      4: '<svg t="1733305238955" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="7560" width="200" height="200"><path d="M512 512m-512 0a512 512 0 1 0 1024 0 512 512 0 1 0-1024 0Z" fill="#FF9D54" p-id="7561"></path><path d="M140.4844 241.955886a46.55193 101.696557 29.75 1 0 80.832661 46.199672 46.55193 101.696557 29.75 1 0-80.832661-46.199672Z" fill="#FFFFFF" p-id="7562"></path><path d="M93.495652 431.86087m-22.260869 0a22.26087 22.26087 0 1 0 44.521739 0 22.26087 22.26087 0 1 0-44.521739 0Z" fill="#FFFFFF" p-id="7563"></path><path d="M832.556522 857.043478a24.486957 24.486957 0 1 0 0-48.973913 24.486957 24.486957 0 0 0 0 48.973913z m0 24.486957a48.973913 48.973913 0 1 0 0-97.947826 48.973913 48.973913 0 0 0 0 97.947826z" fill="#FFFFFF" p-id="7564"></path><path d="M735.392278 320.556522H297.51207C275.785461 320.556522 258.226087 338.3296 258.226087 360.314435v312.480278c0 21.97593 17.559374 39.749009 39.285983 39.749009h63.024973l10.685218 47.941008c4.968626 22.216348 31.833043 30.693287 48.350609 15.199722l67.584-63.131826h248.235408c21.726609 0 39.285983-17.781983 39.285983-39.757913V360.314435C774.678261 338.383026 757.056557 320.556522 735.392278 320.556522zM401.497043 534.643757c-18.378574 0-33.213217-15.083965-33.213217-33.613914s14.896974-33.613913 33.213217-33.613913c18.36967 0 33.213217 15.083965 33.213218 33.613913s-14.843548 33.613913-33.213218 33.613914z m120.965566 2.341843c-18.36967 0-33.213217-15.083965-33.213218-33.613913 0-18.538852 14.896974-33.622817 33.213218-33.622817 18.36967 0 33.213217 15.083965 33.213217 33.622817 0 18.521043-14.843548 33.613913-33.213217 33.613913z m120.965565 0c-18.36967 0-33.213217-15.083965-33.213217-33.613913 0-18.538852 14.896974-33.622817 33.213217-33.622817 18.36967 0 33.213217 15.083965 33.213217 33.622817 0 18.521043-14.843548 33.613913-33.213217 33.613913z" fill="#FFFFFF" p-id="7565"></path></svg>',
      5: '<svg t="1733305266547" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="8918" width="200" height="200"><path d="M512 736l-192 192v-192H128a32 32 0 0 1-32-32V128a32 32 0 0 1 32-32h768a32 32 0 0 1 32 32v576a32 32 0 0 1-32 32H512z" fill="#FFFFFF" p-id="8919"></path><path d="M512 736l-192 192v-192H128a32 32 0 0 1-32-32V128a32 32 0 0 1 32-32h768a32 32 0 0 1 32 32v576a32 32 0 0 1-32 32H512z m-160 114.752L498.752 704H896V128H128v576h224v146.752z" fill="#5D6D7E" p-id="8920"></path><path d="M224 384h576v32H224v-32z m0 96h576v32H224v-32z m0 96h320v32H224v-32z" fill="#808FA1" p-id="8921"></path><path d="M224 224h576v192H224z" fill="#C49F74" p-id="8922"></path></svg>'
    };
    return icons[type] || icons[1];
  }
  // 修改 refreshAllIcons 方法
  refreshAllIcons() {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!markdownView)
      return;
    const callouts = markdownView.contentEl.querySelectorAll(".callout");
    callouts.forEach((callout) => {
      if (callout instanceof HTMLElement) {
        const existingIcon = callout.querySelector(".callout-message-icon-container");
        if (existingIcon) {
          existingIcon.remove();
        }
        callout.style.setProperty("--icon-size", `${this.settings.iconSettings.size}px`);
        callout.style.setProperty("--icon-top-position", `${this.settings.iconSettings.position.top}px`);
        callout.style.setProperty("--icon-right-position", `${this.settings.iconSettings.position.right}px`);
        this.addMessageIconToCallout(callout);
      }
    });
  }
  // 修改 togglePrismStyle 方法
  togglePrismStyle(enabled) {
    const rootElement = document.body;
    if (enabled) {
      const styleTag = document.createElement("style");
      styleTag.id = "callout-prism-styles";
      styleTag.textContent = `
                body:not(.pt-disable-callout-styling) {
                    --callout-padding: 4px;
                    --callout-radius: var(--radius-m);
                    --callout-background-alpha: 20%;
                }

                body:not(.pt-disable-callout-styling) .callout {
                    background-color: unset;
                    position: relative !important;
                }

                .callout-message-icon-container {
                    position: absolute !important;
                    z-index: 9999 !important;
                    display: flex !important;
                    align-items: center !important;
                    gap: 4px !important;
                    cursor: pointer !important;
                    pointer-events: all !important;
                    user-select: none !important;
                }

                .callout-message-icon {
                    display: flex !important;
                    align-items: center !important;
                    justify-content: center !important;
                    pointer-events: all !important;
                    z-index: 9999 !important;
                }

                /* \u6DFB\u52A0\u65B0\u7684\u6837\u5F0F\u89C4\u5219\u6765\u7406\u52A8\u6001\u5C3A\u5BF8\u548C\u4F4D\u7F6E */
                .callout-message-icon-container[style*="top"],
                .callout-message-icon-container[style*="right"] {
                    top: var(--icon-top-position) !important;
                    right: var(--icon-right-position) !important;
                }

                .callout-message-icon[style*="width"],
                .callout-message-icon[style*="height"] {
                    width: var(--icon-size) !important;
                    height: var(--icon-size) !important;
                }

                .callout-message-count {
                    display: inline-flex !important;
                    align-items: center !important;
                    justify-content: center !important;
                    background-color: var(--text-accent) !important;
                    color: white !important;
                    border-radius: 50% !important;
                    width: 20px !important;
                    height: 20px !important;
                    font-size: 12px !important;
                    cursor: pointer !important;
                    pointer-events: all !important;
                    z-index: 9999 !important;
                    user-select: none !important;
                }

                .callout:hover .callout-message-icon-container {
                    opacity: 1 !important;
                    visibility: visible !important;
                }

                .workspace-leaf-content[data-type="markdown"] .callout-message-icon-container {
                    z-index: 9999 !important;
                }

                .callout-message-icon-container::before {
                    content: '';
                    position: absolute;
                    top: -5px;
                    right: -5px;
                    bottom: -5px;
                    left: -5px;
                    z-index: -1;
                }

                .callout-title {
                    position: relative;
                    z-index: 5;
                    gap: unset;
                    align-items: center;
                    min-height: 36px;
                    border: 2px solid;
                    border-radius: var(--radius-m);
                    background: rgba(var(--callout-color), 0.05);
                    pointer-events: auto;
                }

                .callout-title:empty + .callout-content {
                    padding: var(--size-4-1) var(--size-4-3);
                    border-top-style: solid;
                    border-top-width: 1px;
                    border-radius: var(--radius-m);
                }

                .callout-title-inner {
                    padding: var(--size-4-1) 0;
                    margin: 0 var(--size-4-1);
                }

                .callout-icon {
                    align-self: unset;
                    margin: 0 var(--size-4-1) 0 var(--size-4-2);
                    border-radius: var(--radius-m);
                }

                .callout-fold {
                    display: flex;
                    align-self: unset;
                    margin-top: unset;
                    margin-left: auto;
                }

                .callout-content {
                    padding: var(--size-4-5) var(--size-4-3) var(--size-4-1) var(--size-4-3);
                    margin-top: -16px;
                    border-right: 1px solid rgba(var(--callout-color));
                    border-bottom: 1px solid rgba(var(--callout-color));
                    border-left: 1px solid rgba(var(--callout-color));
                    border-bottom-right-radius: var(--radius-m);
                    border-bottom-left-radius: var(--radius-m);
                    background: rgba(var(--callout-color), 0);
                }

                .callout p {
                    font-family: 'Palatino', 'Kai', '\u6977\u4F53', serif;
                    margin-top: 20px;
                    margin-bottom: 0;
                }

                .callout-highlight {
                    animation: highlight-pulse 2s ease-in-out;
                }

                @keyframes highlight-pulse {
                    0% {
                        box-shadow: 0 0 0 0 rgba(var(--text-accent-rgb), 0.4);
                    }
                    70% {
                        box-shadow: 0 0 0 10px rgba(var(--text-accent-rgb), 0);
                    }
                    100% {
                        box-shadow: 0 0 0 0 rgba(var(--text-accent-rgb), 0);
                    }
                }

                /* \u6DFB\u52A0\u6240\u6709 Callout \u7C7B\u578B\u7684\u6837\u5F0F */
                ${this.getCalloutTypeStyles()}
            `;
      document.head.appendChild(styleTag);
    } else {
      const existingStyle = document.getElementById("callout-prism-styles");
      if (existingStyle) {
        existingStyle.remove();
      }
    }
    this.refreshAllIcons();
  }
  // 添加一个新方法来生成所有 Callout 类型的样式
  getCalloutTypeStyles() {
    return `
            /* Type 1 - Note */
            body:not(.pt-disable-callout-styling) .callout[data-callout="note"] > .callout-title {
                color: var(--color-grey-text);
                background-color: var(--color-grey-base);
                border-color: var(--color-grey-tint);
            }
            body:not(.pt-disable-callout-styling) .callout[data-callout="note"] > .callout-content {
                background-color: hsla(var(--color-grey-base-hsl), var(--callout-background-alpha));
                border-color: var(--color-grey-tint);
            }

            /* Type 2 - Abstract/Summary/TLDR */
            body:not(.pt-disable-callout-styling) .callout:is([data-callout="abstract"],[data-callout="summary"],[data-callout="tldr"]) > .callout-title {
                color: var(--color-cyan-text);
                background-color: var(--color-cyan-base);
                border-color: var(--color-cyan-tint);
            }
            body:not(.pt-disable-callout-styling) .callout:is([data-callout="abstract"],[data-callout="summary"],[data-callout="tldr"]) > .callout-content {
                background-color: hsla(var(--color-cyan-base-hsl), var(--callout-background-alpha));
                border-color: var(--color-cyan-tint);
            }

            /* \u7EE7\u7EED\u52A0\u5176\u4ED6\u7C7B\u578B\u7684\u6837\u5F0F... */
            /* \u8FD9\u91CC\u53EF\u4EE5\u7EE7\u7EED\u6DFB\u52A0\u5176\u4ED6\u7C7B\u578B\u7684\u6837\u5F0F\uFF0C\u4E0E\u539F\u59CB CSS \u4FDD\u6301\u4E00\u81F4 */
        `;
  }
  // 添加更新图标显示状态的方法
  updateCalloutIconVisibility() {
    const bodyClasses = document.body.classList;
    if (this.settings.showCalloutIcon) {
      bodyClasses.add("show-callout-icon");
    } else {
      bodyClasses.remove("show-callout-icon");
    }
  }
};
var MessageInputModal = class extends import_obsidian.Modal {
  // 添加消息索引属性
  constructor(app, plugin, calloutId, messageIndex) {
    super(app);
    this.plugin = plugin;
    this.calloutId = calloutId;
    this.messageIndex = messageIndex;
    this.inputEl = document.createElement("textarea");
  }
  onOpen() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("message-input-modal");
    contentEl.createEl("h3", { text: "\u7F16\u8F91 Callout \u5907\u6CE8" });
    if (typeof this.messageIndex === "number") {
      const messageData = this.plugin.settings.messages[this.calloutId];
      if ((_a = messageData == null ? void 0 : messageData.messages) == null ? void 0 : _a[this.messageIndex]) {
        this.inputEl.value = messageData.messages[this.messageIndex].text;
      }
    }
    this.inputEl.rows = 10;
    this.inputEl.placeholder = "\u8BF7\u8F93\u5165 Callout \u5907\u6CE8\u4FE1\u606F...";
    const buttonContainer = contentEl.createEl("div", {
      cls: "message-input-modal-buttons"
    });
    const saveButton = buttonContainer.createEl("button", {
      text: "\u4FDD\u5B58",
      cls: "mod-cta"
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6\u6D88"
    });
    saveButton.addEventListener("click", () => {
      this.saveMessage();
      this.close();
    });
    cancelButton.addEventListener("click", () => this.close());
    contentEl.appendChild(this.inputEl);
    contentEl.appendChild(buttonContainer);
  }
  async saveMessage() {
    var _a, _b;
    const text = this.inputEl.value.trim();
    if (!text)
      return;
    if (!this.plugin.settings.messages[this.calloutId]) {
      this.plugin.settings.messages[this.calloutId] = {
        messages: []
      };
    }
    const timestamp = new Date().toLocaleString();
    if (typeof this.messageIndex === "number") {
      this.plugin.settings.messages[this.calloutId].messages[this.messageIndex] = {
        text,
        timestamp
      };
    } else {
      this.plugin.settings.messages[this.calloutId].messages.push({
        text,
        timestamp
      });
    }
    await this.plugin.saveSettings();
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const callout = (_a = activeView.contentEl.querySelector(
        `[data-callout-id="${this.calloutId}"]`
      )) == null ? void 0 : _a.closest(".callout");
      if (callout instanceof HTMLElement) {
        this.plugin.updateCalloutMessageCount(callout);
      }
    }
    const messageView = (_b = this.app.workspace.getLeavesOfType(CALL_OUT_MESSAGE_VIEW)[0]) == null ? void 0 : _b.view;
    if (messageView) {
      messageView.displayMessages();
    }
    try {
      await this.plugin.reopenCurrentNote();
    } catch (error) {
      console.error("\u91CD\u65B0\u6253\u5F00\u7B14\u8BB0\u5931\u8D25:", error);
    }
    this.close();
  }
  updateAllCalloutCounts(calloutId) {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!markdownView)
      return;
    const callouts = markdownView.contentEl.querySelectorAll(".callout");
    callouts.forEach((callout) => {
      if (callout instanceof HTMLElement) {
        const id = this.plugin.getCalloutId(callout);
        if (id === calloutId) {
          const container = callout.querySelector(".callout-message-icon-container");
          if (container instanceof HTMLElement) {
            this.plugin.updateMessageCount(callout, container);
          }
        }
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CalloutMessageView = class extends import_obsidian.View {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentCalloutId = null;
    this.viewMode = "all";
    // 添加新方法以支持导航
    this.navigation = true;
    this.plugin = plugin;
    this.containerEl.empty();
    this.initializeButtons();
    this.messageContainer = this.containerEl.createDiv("callout-messages-container");
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        if (this.viewMode === "all") {
          this.displayMessages();
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-change", () => {
        setTimeout(() => {
          if (this.viewMode === "all") {
            this.displayMessages();
          }
        }, 100);
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-open", () => {
        if (this.viewMode === "all") {
          this.displayMessages();
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        setTimeout(() => {
          if (this.viewMode === "all") {
            this.displayMessages();
          }
        }, 100);
      })
    );
    if (this.viewMode === "all") {
      this.displayMessages();
    }
  }
  initializeButtons() {
    this.buttonContainer = this.containerEl.createDiv("view-buttons-row");
    const allButton = this.buttonContainer.createEl("button", {
      cls: this.viewMode === "all" ? "mod-cta" : ""
    });
    const buttonContent = allButton.createDiv({
      attr: {
        style: "display: flex; flex-direction: column; align-items: center; gap: 4px;"
      }
    });
    const mainText = buttonContent.createDiv();
    mainText.textContent = "\u663E\u793A\u6216\u5237\u65B0\u6240\u6709callout\u7B14\u8BB0";
    const tipText = buttonContent.createDiv();
    tipText.innerHTML = '<strong style="color: red; font-size: 0.9em;">\u2705\u70B9\u51FB\u7B14\u8BB0\u754C\u9762\u4EFB\u610F\u533A\u57DF</strong>';
    const singleButton = this.buttonContainer.createEl("button", {
      cls: this.viewMode === "single" ? "mod-cta" : ""
    });
    const singleButtonContent = singleButton.createDiv({
      attr: {
        style: "display: flex; flex-direction: column; align-items: center; gap: 4px;"
      }
    });
    const singleMainText = singleButtonContent.createDiv();
    singleMainText.textContent = "\u663E\u793A\u6216\u5237\u65B0\u5355\u4E2ACallout\u7B14\u8BB0";
    const singleTipText = singleButtonContent.createDiv();
    singleTipText.innerHTML = '<strong style="color: #2ecc71; font-size: 0.9em;">\u{1F499}\u70B9\u51FB\u7B14\u8BB0\u53F3\u4E0A\u89D2\u7684\u6570\u5B57</strong>';
    allButton.addEventListener("click", () => {
      this.switchToAllMode();
    });
    singleButton.addEventListener("click", () => {
      if (this.currentCalloutId) {
        this.switchToSingleMode(this.currentCalloutId);
      } else {
        new import_obsidian.Notice("\u70B9\u51FB Callout \u53F3\u4E0A\u89D2\u7684\u6570\u5B57\u6765\u67E5\u770B\u5355\u4E2A Callout \u7684\u5907\u6CE8");
      }
    });
    const exportButtonRow = this.buttonContainer.createDiv("export-button-row");
    const exportButton = exportButtonRow.createEl("button", {
      text: "\u5BFC\u51FA\u7B14\u8BB0",
      cls: "export-button"
    });
    exportButton.addEventListener("click", () => {
      this.exportToPDF();
    });
  }
  // 修改 switchViewMode 方法
  switchViewMode(mode, activeButton, inactiveButton) {
    this.viewMode = mode;
    activeButton.addClass("mod-cta");
    inactiveButton.removeClass("mod-cta");
    this.messageContainer.empty();
    if (mode === "single") {
      if (this.currentCalloutId) {
        this.displayMessages();
      } else {
        new import_obsidian.Notice("\u70B9\u51FB Callout \u53F3\u4E0A\u89D2\u7684\u6570\u5B57\u6765\u67E5\u770B\u5355\u4E2A Callout \u7684\u5907\u6CE8");
      }
    } else if (mode === "all") {
      this.displayMessages();
    }
  }
  // 修改 switchToAllMode 方法
  switchToAllMode() {
    this.viewMode = "all";
    this.currentCalloutId = null;
    this.updateButtonStates();
    this.refreshView();
  }
  // 修改 switchToSingleMode 方法
  switchToSingleMode(calloutId) {
    var _a;
    this.viewMode = "single";
    this.currentCalloutId = calloutId;
    this.updateButtonStates();
    this.messageContainer.empty();
    if (!calloutId) {
      new import_obsidian.Notice("\u70B9\u51FB Callout \u53F3\u4E0A\u89D2\u7684\u6570\u5B57\u6765\u67E5\u770B\u5355\u4E2A Callout \u7684\u5907\u6CE8");
      return;
    }
    const messageData = this.plugin.settings.messages[calloutId];
    if (((_a = messageData == null ? void 0 : messageData.messages) == null ? void 0 : _a.length) > 0) {
      this.renderMessages(calloutId, messageData);
    } else {
      this.showEmptyMessage("\u8BE5 Callout \u6682\u65E0\u5907\u6CE8");
    }
  }
  setCurrentCallout(calloutId) {
    this.currentCalloutId = calloutId;
    this.viewMode = "single";
    this.updateButtonStates();
    this.displayMessages();
  }
  updateButtonStates() {
    const buttons = this.buttonContainer.querySelectorAll("button");
    buttons[0].toggleClass("mod-cta", this.viewMode === "all");
    buttons[1].toggleClass("mod-cta", this.viewMode === "single");
  }
  // 修改 displayMessages 方法
  displayMessages() {
    var _a;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView)
      return;
    this.messageContainer.empty();
    const callouts = activeView.contentEl.querySelectorAll(".callout");
    const currentCalloutIds = /* @__PURE__ */ new Set();
    callouts.forEach((callout) => {
      if (callout instanceof HTMLElement) {
        const id = this.getCalloutIdFromElement(callout);
        if (id)
          currentCalloutIds.add(id);
      }
    });
    const messages = this.plugin.settings.messages;
    if (this.viewMode === "single" && this.currentCalloutId) {
      const messageData = messages[this.currentCalloutId];
      if (((_a = messageData == null ? void 0 : messageData.messages) == null ? void 0 : _a.length) > 0) {
        this.renderMessages(this.currentCalloutId, messageData);
      } else {
        this.showEmptyMessage("\u8BE5 Callout \u6682\u65E0\u5907\u6CE8");
      }
    } else if (this.viewMode === "all") {
      let hasMessages = false;
      currentCalloutIds.forEach((calloutId) => {
        var _a2;
        const messageData = messages[calloutId];
        if (((_a2 = messageData == null ? void 0 : messageData.messages) == null ? void 0 : _a2.length) > 0) {
          const groupContainer = this.messageContainer.createDiv("callout-message-group");
          const groupTitle = groupContainer.createDiv("callout-message-group-title");
          const calloutConfig = this.getCalloutConfigForMessage(calloutId);
          groupTitle.style.color = calloutConfig.color;
          groupTitle.style.borderBottom = `2px solid ${calloutConfig.color}`;
          groupTitle.style.marginBottom = "10px";
          groupTitle.style.paddingBottom = "5px";
          groupTitle.style.fontWeight = "bold";
          groupTitle.textContent = `${calloutConfig.name} \u7684\u5907\u6CE8`;
          messageData.messages.forEach((message, index) => {
            const messageEl = this.createMessageElement(
              calloutId,
              message,
              index,
              messageData,
              calloutConfig
            );
            groupContainer.appendChild(messageEl);
          });
          hasMessages = true;
        }
      });
      if (!hasMessages) {
        this.showEmptyMessage("\u5F53\u524D\u6587\u6863\u4E2D\u6CA1\u6709 Callout \u5907\u6CE8");
      }
    }
  }
  // 新增：消息渲染方法
  renderMessages(calloutId, messageData) {
    if (!(messageData == null ? void 0 : messageData.messages))
      return;
    this.messageContainer.empty();
    const calloutConfig = this.getCalloutConfigForMessage(calloutId);
    messageData.messages.forEach((message, index) => {
      const messageEl = this.createMessageElement(
        calloutId,
        message,
        index,
        messageData,
        calloutConfig
      );
      this.messageContainer.appendChild(messageEl);
    });
  }
  // 新增：单个消息元素创建方法
  createMessageElement(calloutId, message, index, messageData, calloutConfig) {
    const messageEl = createEl("div", { cls: "callout-message-item" });
    Object.assign(messageEl.style, {
      backgroundColor: this.adjustColor(calloutConfig.color, 0.1),
      borderLeft: `4px solid ${calloutConfig.color}`,
      borderRadius: "4px",
      margin: "10px 0",
      padding: "12px"
    });
    const titleEl = messageEl.createEl("div", { cls: "callout-message-title" });
    const titleText = titleEl.createEl("span", {
      text: calloutConfig.name,
      cls: "callout-title-text"
    });
    titleText.style.color = calloutConfig.color;
    titleText.style.fontWeight = "bold";
    const buttonContainer = titleEl.createEl("div", { cls: "callout-message-buttons" });
    const editButton = this.createButton(buttonContainer, "\u7F16\u8F91", calloutConfig.color);
    editButton.onclick = async (e) => {
      e.preventDefault();
      e.stopPropagation();
      const modal = new import_obsidian.Modal(this.app);
      modal.titleEl.setText("\u7F16\u8F91 Callout \u5907\u6CE8");
      modal.containerEl.addClass("callout-message-modal");
      const textAreaContainer = modal.contentEl.createDiv("callout-message-textarea-container");
      textAreaContainer.style.margin = "20px 0";
      const textArea = textAreaContainer.createEl("textarea", {
        attr: {
          placeholder: "\u8BF7\u8F93\u5165 Callout \u5907\u6CE8\u4FE1\u606F..."
        },
        cls: "callout-message-textarea",
        value: message.text
      });
      textArea.addEventListener("input", () => {
        const newText = textArea.value.trim();
        if (newText) {
          messageData.messages[index] = {
            text: newText,
            timestamp: new Date().toLocaleString()
          };
          this.displayMessages();
        }
      });
      textArea.style.width = "100%";
      textArea.style.minHeight = "150px";
      textArea.style.padding = "10px";
      textArea.style.borderRadius = "4px";
      textArea.style.border = "1px solid var(--background-modifier-border)";
      textArea.style.backgroundColor = "var(--background-primary)";
      textArea.style.resize = "vertical";
      const buttonContainer2 = modal.contentEl.createDiv("button-container");
      buttonContainer2.style.display = "flex";
      buttonContainer2.style.justifyContent = "flex-end";
      buttonContainer2.style.gap = "10px";
      buttonContainer2.style.marginTop = "20px";
      const saveButton = buttonContainer2.createEl("button", {
        text: "\u4FDD\u5B58",
        cls: "mod-cta"
      });
      saveButton.style.backgroundColor = "var(--interactive-accent)";
      saveButton.style.color = "var(--text-on-accent)";
      const cancelButton = buttonContainer2.createEl("button", {
        text: "\u53D6\u6D88"
      });
      saveButton.addEventListener("click", async () => {
        const newText = textArea.value.trim();
        if (!newText) {
          new import_obsidian.Notice("\u5907\u6CE8\u5185\u5BB9\u4E0D\u80FD\u4E3A\u7A7A");
          return;
        }
        await this.plugin.saveSettings();
        this.updateAllCalloutCounts(calloutId);
        modal.close();
        new import_obsidian.Notice("\u5907\u6CE8\u5DF2\u66F4\u65B0");
      });
      cancelButton.addEventListener("click", () => {
        modal.close();
      });
      setTimeout(() => {
        textArea.value = message.text;
        textArea.focus();
      }, 0);
      modal.open();
    };
    const deleteButton = this.createButton(buttonContainer, "\u5220\u9664", "#ff4444");
    deleteButton.onclick = async (e) => {
      e.preventDefault();
      e.stopPropagation();
      messageData.messages.splice(index, 1);
      this.displayMessages();
      await this.plugin.saveSettings();
      this.updateAllCalloutCounts(calloutId);
      new import_obsidian.Notice("\u5907\u6CE8\u5DF2\u5220\u9664");
    };
    const contentEl = messageEl.createEl("div", {
      cls: "callout-message-content",
      text: message.text
    });
    contentEl.style.color = calloutConfig.textColor;
    messageEl.createEl("div", {
      cls: "callout-message-timestamp",
      text: message.timestamp
    });
    return messageEl;
  }
  // 新增：处理编辑操作
  async handleEdit(e, message, messageEl, index, messageData) {
    e.preventDefault();
    e.stopPropagation();
    const calloutId = this.currentCalloutId;
    if (!calloutId)
      return;
    const modal = new import_obsidian.Modal(this.app);
    modal.titleEl.setText("\u7F16\u8F91 Callout \u5907\u6CE8");
    modal.containerEl.addClass("callout-message-modal");
    const textAreaContainer = modal.contentEl.createDiv("callout-message-textarea-container");
    textAreaContainer.style.margin = "20px 0";
    const textArea = textAreaContainer.createEl("textarea", {
      attr: {
        placeholder: "\u8BF7\u8F93\u5165 Callout \u5907\u6CE8\u4FE1\u606F..."
      },
      cls: "callout-message-textarea",
      value: message.text
    });
    textArea.style.width = "100%";
    textArea.style.minHeight = "150px";
    textArea.style.padding = "10px";
    textArea.style.borderRadius = "4px";
    textArea.style.border = "1px solid var(--background-modifier-border)";
    textArea.style.backgroundColor = "var(--background-primary)";
    textArea.style.resize = "vertical";
    const buttonContainer = modal.contentEl.createDiv("button-container");
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.marginTop = "20px";
    const saveButton = buttonContainer.createEl("button", {
      text: "\u4FDD\u5B58",
      cls: "mod-cta"
    });
    saveButton.style.backgroundColor = "var(--interactive-accent)";
    saveButton.style.color = "var(--text-on-accent)";
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6\u6D88"
    });
    saveButton.addEventListener("click", async () => {
      const newText = textArea.value.trim();
      if (!newText) {
        new import_obsidian.Notice("\u5907\u6CE8\u5185\u5BB9\u4E0D\u80FD\u4E3A\u7A7A");
        return;
      }
      messageData.messages[index].text = newText;
      messageData.messages[index].timestamp = new Date().toLocaleString();
      await this.plugin.saveSettings();
      this.refreshView();
      modal.close();
      new import_obsidian.Notice("\u5907\u6CE8\u5DF2\u66F4\u65B0");
    });
    cancelButton.addEventListener("click", () => {
      modal.close();
    });
    setTimeout(() => {
      textArea.value = message.text;
      textArea.focus();
    }, 0);
    modal.open();
  }
  // 新增：处理删除操作
  async handleDelete(e, index, messageData, calloutId) {
    e.preventDefault();
    e.stopPropagation();
    messageData.messages.splice(index, 1);
    await this.plugin.saveSettings();
    this.updateMessageCount(calloutId, messageData.messages.length);
    this.refreshView();
    new import_obsidian.Notice("\u6D88\u606F\u5DF2\u5220\u9664");
  }
  // 新增：更新消息计数
  updateMessageCount(calloutId, count) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView)
      return;
    const callouts = activeView.contentEl.querySelectorAll(".callout");
    callouts.forEach((callout) => {
      if (callout instanceof HTMLElement) {
        const id = this.getCalloutIdFromElement(callout);
        if (id === calloutId) {
          const countSpan = callout.querySelector(".callout-message-count");
          if (countSpan)
            countSpan.textContent = count.toString();
        }
      }
    });
  }
  // 工具方法：创建按钮
  createButton(container, text, color) {
    const button = container.createEl("button", {
      text,
      cls: `callout-message-${text.toLowerCase()}-button`
    });
    Object.assign(button.style, {
      backgroundColor: color,
      color: "#ffffff",
      border: "none",
      borderRadius: "4px",
      padding: "4px 8px",
      cursor: "pointer",
      marginRight: text === "\u7F16\u8F91" ? "8px" : "0"
    });
    return button;
  }
  showEmptyMessage(message) {
    if (this.viewMode === "single" && !this.currentCalloutId) {
      new import_obsidian.Notice("\u70B9\u51FB Callout \u53F3\u4E0A\u89D2\u7684\u6570\u5B57\u6765\u67E5\u770B\u5355\u4E2A Callout \u7684\u5907\u6CE8");
      return;
    }
    this.messageContainer.createEl("div", {
      cls: "callout-message-empty",
      text: message
    });
  }
  getCalloutConfigForMessage(calloutId) {
    const currentScene = this.plugin.settings.scenes.find(
      (scene) => scene.id === this.plugin.settings.currentSceneId
    );
    if (currentScene) {
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (markdownView) {
        const callouts = markdownView.contentEl.querySelectorAll(".callout");
        for (const callout of Array.from(callouts)) {
          if (callout instanceof HTMLElement) {
            const id = this.plugin.getCalloutId(callout);
            if (id === calloutId) {
              const titleEl = callout.querySelector(".callout-title");
              if (titleEl) {
                const titleText = titleEl.textContent || "";
                const config = currentScene.callouts.find((c) => titleText.includes(c.name));
                if (config) {
                  return config;
                }
              }
            }
          }
        }
      }
    }
    return (currentScene == null ? void 0 : currentScene.callouts[0]) || this.plugin.settings.scenes[0].callouts[0];
  }
  scrollToCallout(calloutId) {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!markdownView)
      return;
    const callouts = markdownView.contentEl.querySelectorAll(".callout");
    for (const callout of Array.from(callouts)) {
      if (callout instanceof HTMLElement) {
        const id = this.getCalloutIdFromElement(callout);
        if (id === calloutId) {
          this.highlightCallout(callout);
          callout.scrollIntoView({ behavior: "smooth", block: "center" });
          break;
        }
      }
    }
  }
  highlightCallout(callout) {
    callout.addClass("callout-highlight");
    setTimeout(() => {
      callout.removeClass("callout-highlight");
    }, 2e3);
  }
  adjustColor(color, opacity) {
    if (color.startsWith("#")) {
      const r = parseInt(color.slice(1, 3), 16);
      const g = parseInt(color.slice(3, 5), 16);
      const b = parseInt(color.slice(5, 7), 16);
      return `rgba(${r}, ${g}, ${b}, ${opacity})`;
    }
    return color;
  }
  getViewType() {
    return CALL_OUT_MESSAGE_VIEW;
  }
  getDisplayText() {
    return "Callout \u5907\u6CE8";
  }
  getIcon() {
    return "message-circle";
  }
  // 添加导出 PDF 方法
  async exportToPDF() {
    if (!await this.plugin.checkActivation())
      return;
    try {
      const previewContent = document.createElement("div");
      previewContent.className = "export-preview-container";
      const messages = this.plugin.settings.messages;
      let hasContent = false;
      const messagesToShow = Array.from(this.messageContainer.querySelectorAll(".callout-message-item")).map((item) => {
        const titleEl = item.querySelector(".callout-title-text");
        const contentEl = item.querySelector(".callout-message-content");
        const timeEl = item.querySelector(".callout-message-timestamp");
        const color = window.getComputedStyle(item).borderLeftColor;
        return {
          title: (titleEl == null ? void 0 : titleEl.textContent) || "",
          content: (contentEl == null ? void 0 : contentEl.textContent) || "",
          time: (timeEl == null ? void 0 : timeEl.textContent) || "",
          color
        };
      });
      if (messagesToShow.length === 0) {
        new import_obsidian.Notice("\u6CA1\u6709\u53EF\u5BFC\u51FA\u7684 Callout \u5907\u6CE8");
        return;
      }
      messagesToShow.forEach((message) => {
        hasContent = true;
        const calloutDiv = document.createElement("div");
        calloutDiv.className = "callout";
        calloutDiv.style.borderLeftColor = message.color;
        calloutDiv.style.backgroundColor = this.adjustColor(message.color, 0.1);
        const titleDiv = document.createElement("div");
        titleDiv.className = "callout-title";
        titleDiv.style.color = message.color;
        titleDiv.textContent = message.title;
        calloutDiv.appendChild(titleDiv);
        const contentDiv = document.createElement("div");
        contentDiv.className = "callout-content";
        contentDiv.textContent = message.content;
        calloutDiv.appendChild(contentDiv);
        const timeDiv = document.createElement("div");
        timeDiv.className = "callout-timestamp";
        timeDiv.textContent = message.time;
        calloutDiv.appendChild(timeDiv);
        previewContent.appendChild(calloutDiv);
      });
      const previewModal = new import_obsidian.Modal(this.app);
      previewModal.titleEl.setText("\u5BFC\u51FA\u9884\u89C8");
      previewModal.contentEl.addClass("export-preview-modal");
      const previewContainer = previewModal.contentEl.createDiv("export-preview-container");
      previewContainer.style.maxHeight = "70vh";
      previewContainer.style.overflow = "auto";
      previewContainer.style.padding = "20px";
      previewContainer.style.backgroundColor = "var(--background-primary)";
      previewContainer.style.borderRadius = "8px";
      previewContainer.style.border = "1px solid var(--background-modifier-border)";
      const clonedMessages = Array.from(this.messageContainer.children).map((child) => {
        const clone = child.cloneNode(true);
        const buttons = clone.querySelectorAll(".callout-message-buttons");
        buttons.forEach((button) => button.remove());
        const editButtons = clone.querySelectorAll(".callout-message-edit-button");
        const deleteButtons = clone.querySelectorAll(".callout-message-delete-button");
        editButtons.forEach((button) => button.remove());
        deleteButtons.forEach((button) => button.remove());
        return clone;
      });
      const printStyles = `
                <style>
                    ${this.getObsidianStyles()}
                    /* \u786E\u4FDD\u6253\u5370\u65F6\u9690\u85CF\u6240\u6709\u6309\u94AE */
                    .callout-message-buttons,
                    .callout-message-edit-button,
                    .callout-message-delete-button {
                        display: none !important;
                    }
                    
                    /* \u4F18\u5316\u6253\u5370\u5E03\u5C40 */
                    .callout-message-item {
                        page-break-inside: avoid;
                        margin: 10px 0;
                        padding: 12px;
                        border-radius: 4px;
                    }
                    
                    .callout-message-title {
                        margin-bottom: 8px;
                        font-weight: bold;
                    }
                    
                    .callout-message-content {
                        margin: 8px 0;
                    }
                    
                    .callout-message-timestamp {
                        font-size: 0.8em;
                        color: #666;
                        text-align: right;
                        margin-top: 8px;
                    }
                </style>
            `;
      const printContent = `
                <html>
                    <head>
                        <title>Callout \u5907\u6CE8\u5BFC\u51FA</title>
                        ${printStyles}
                    </head>
                    <body>
                        <div class="export-preview-container">
                            ${previewContainer.innerHTML}
                        </div>
                    </body>
                </html>
            `;
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile) {
        const titleContainer = previewContainer.createDiv("note-title-container");
        titleContainer.style.textAlign = "center";
        titleContainer.style.padding = "15px 0";
        titleContainer.style.marginBottom = "25px";
        titleContainer.style.borderBottom = "2px solid var(--interactive-accent)";
        const titleText = titleContainer.createEl("h2", {
          text: activeFile.basename,
          cls: "note-title"
        });
        titleText.style.margin = "0";
        titleText.style.color = "var(--text-accent)";
        titleText.style.fontSize = "1.5em";
        titleText.style.fontWeight = "600";
        titleText.style.letterSpacing = "0.5px";
        titleText.style.fontFamily = "var(--font-interface)";
      }
      clonedMessages.forEach((clone) => {
        previewContainer.appendChild(clone);
      });
      const buttonContainer = previewModal.contentEl.createDiv("export-preview-buttons");
      buttonContainer.style.marginTop = "20px";
      buttonContainer.style.display = "flex";
      buttonContainer.style.justifyContent = "flex-end";
      buttonContainer.style.gap = "10px";
      const exportButton = buttonContainer.createEl("button", {
        text: "\u786E\u8BA4\u5BFC\u51FA",
        cls: "mod-cta"
      });
      const cancelButton = buttonContainer.createEl("button", {
        text: "\u53D6\u6D88"
      });
      exportButton.addEventListener("click", async () => {
        try {
          const remote = require("@electron/remote");
          if (!remote) {
            new import_obsidian.Notice("\u65E0\u6CD5\u8BBF\u95EE\u7CFB\u7EDF\u5BF9\u8BDD\u6846");
            return;
          }
          const { filePath, canceled } = await remote.dialog.showSaveDialog({
            title: "\u5BFC\u51FA PDF",
            defaultPath: "Callout\u7B14\u8BB0.pdf",
            filters: [{ name: "PDF \u6587\u4EF6", extensions: ["pdf"] }]
          });
          if (canceled || !filePath) {
            return;
          }
          const win = new remote.BrowserWindow({
            width: 800,
            height: 600,
            show: false,
            webPreferences: {
              nodeIntegration: true
            }
          });
          const printContent2 = `
                        <html>
                            <head>
                                <title>Callout \u5907\u6CE8\u5BFC\u51FA</title>
                                ${printStyles}
                            </head>
                            <body>
                                <div class="export-preview-container">
                                    ${previewContainer.innerHTML}
                                </div>
                            </body>
                        </html>
                    `;
          win.loadURL("data:text/html;charset=utf-8," + encodeURIComponent(printContent2));
          win.webContents.on("did-finish-load", async () => {
            try {
              const data = await win.webContents.printToPDF({
                marginsType: 1,
                printBackground: true,
                printSelectionOnly: false,
                landscape: false
              });
              require("fs").writeFile(filePath, data, (error) => {
                if (error) {
                  console.error("PDF \u5BFC\u51FA\u5931\u8D25:", error);
                  new import_obsidian.Notice("PDF \u5BFC\u51FA\u5931\u8D25");
                } else {
                  new import_obsidian.Notice("PDF \u5BFC\u51FA\u6210\u529F\uFF01");
                }
                win.close();
              });
            } catch (error) {
              console.error("PDF \u751F\u6210\u5931\u8D25:", error);
              new import_obsidian.Notice("PDF \u751F\u6210\u5931\u8D25");
              win.close();
            }
          });
          previewModal.close();
        } catch (error) {
          console.error("Export error:", error);
          new import_obsidian.Notice("\u5BFC\u51FA PDF \u5931\u8D25");
        }
      });
      cancelButton.addEventListener("click", () => {
        previewModal.close();
      });
      previewModal.open();
    } catch (error) {
      console.error("Export error:", error);
      new import_obsidian.Notice("\u5BFC\u51FA PDF \u5931\u8D25");
    }
  }
  // 添加获取 Obsidian 样式的辅助方法
  getObsidianStyles() {
    const styles = window.getComputedStyle(document.documentElement);
    let cssVars = ":root {\n";
    for (let i = 0; i < styles.length; i++) {
      const prop = styles[i];
      if (prop.startsWith("--")) {
        cssVars += `  ${prop}: ${styles.getPropertyValue(prop)};
`;
      }
    }
    cssVars += "}\n";
    return `
            ${cssVars}
            body {
                font-family: var(--font-text);
                background-color: var(--background-primary);
                color: var(--text-normal);
                padding: 20px;
                margin: 0;
            }
            .export-preview-container {
                max-width: 800px;
                margin: 0 auto;
            }
            .callout-message-item {
                margin: 10px 0;
                padding: 12px;
                border-radius: 4px;
                position: relative;
            }
            .callout-message-title {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 8px;
            }
            .callout-message-content {
                margin: 8px 0;
            }
            .callout-message-timestamp {
                font-size: 0.8em;
                color: var(--text-muted);
                text-align: right;
                margin-top: 8px;
            }
        `;
  }
  // 在 CalloutMessageView 类中添加显示笔记名称的方法
  displayNoteTitle() {
    const existingTitle = this.containerEl.querySelector(".note-title-container");
    if (existingTitle) {
      existingTitle.remove();
    }
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    const titleContainer = this.containerEl.createDiv("note-title-container");
    titleContainer.style.textAlign = "center";
    titleContainer.style.padding = "15px 0";
    titleContainer.style.marginBottom = "25px";
    titleContainer.style.borderBottom = "2px solid var(--interactive-accent)";
    titleContainer.style.position = "sticky";
    titleContainer.style.top = "0";
    titleContainer.style.backgroundColor = "var(--background-primary)";
    titleContainer.style.zIndex = "1";
    titleContainer.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.1)";
    const titleText = titleContainer.createEl("h2", {
      text: activeFile.basename,
      cls: "note-title"
    });
    titleText.style.margin = "0";
    titleText.style.color = "var(--text-accent)";
    titleText.style.fontSize = "1.5em";
    titleText.style.fontWeight = "600";
    titleText.style.letterSpacing = "0.5px";
    titleText.style.fontFamily = "var(--font-interface)";
    if (this.messageContainer) {
      this.containerEl.insertBefore(titleContainer, this.messageContainer);
    }
  }
  // 添加 getCalloutIdFromElement 方法
  getCalloutIdFromElement(callout) {
    const span = callout.querySelector("span[data-callout-id]");
    if (span) {
      return span.getAttribute("data-callout-id");
    }
    return null;
  }
  // 新增：视图刷新方法
  refreshView() {
    this.messageContainer.empty();
    this.displayMessages();
  }
  // 添加更新所有相关消息计数的方法
  updateAllCalloutCounts(calloutId) {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!markdownView)
      return;
    const callouts = markdownView.contentEl.querySelectorAll(".callout");
    callouts.forEach((callout) => {
      if (callout instanceof HTMLElement) {
        const id = this.plugin.getCalloutId(callout);
        if (id === calloutId) {
          this.plugin.updateCalloutMessageCount(callout);
        }
      }
    });
  }
};
var CalloutMessageSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.cleanupFunctions = [];
    this.plugin = plugin;
  }
  display() {
    var _a;
    const { containerEl } = this;
    containerEl.empty();
    const navContainer = containerEl.createDiv("nav-container");
    navContainer.style.display = "flex";
    navContainer.style.borderBottom = "2px solid var(--background-modifier-border)";
    navContainer.style.marginBottom = "24px";
    navContainer.style.padding = "0 10px";
    navContainer.style.gap = "10px";
    const tabs = [
      { id: "basic", text: "\u57FA\u7840\u8BBE\u7F6E" },
      { id: "icon", text: "\u56FE\u6807\u88C5\u9970" },
      { id: "license", text: "\u6388\u6743" },
      { id: "about", text: "\u5173\u4E8E" }
    ];
    const contentContainer = containerEl.createDiv("content-container");
    const contents = {
      basic: contentContainer.createDiv("basic-settings-content"),
      icon: contentContainer.createDiv("icon-settings-content"),
      license: contentContainer.createDiv("license-content"),
      about: contentContainer.createDiv("about-content")
    };
    tabs.forEach((tab) => {
      const tabButton = navContainer.createEl("button", {
        text: tab.text,
        cls: "nav-tab"
      });
      tabButton.style.padding = "8px 16px";
      tabButton.style.border = "none";
      tabButton.style.borderRadius = "4px 4px 0 0";
      tabButton.style.backgroundColor = "transparent";
      tabButton.style.cursor = "pointer";
      tabButton.style.color = "var(--text-muted)";
      tabButton.style.fontSize = "14px";
      tabButton.style.fontWeight = "bold";
      tabButton.onclick = () => {
        Object.values(contents).forEach((content) => content.style.display = "none");
        contents[tab.id].style.display = "block";
        navContainer.querySelectorAll(".nav-tab").forEach((el) => {
          el.style.backgroundColor = "transparent";
          el.style.color = "var(--text-muted)";
        });
        tabButton.style.backgroundColor = "var(--background-secondary)";
        tabButton.style.color = "var(--text-accent)";
      };
    });
    contents.basic.style.display = "block";
    (_a = navContainer.querySelector(".nav-tab")) == null ? void 0 : _a.click();
    this.renderBasicContent(contents.basic);
    this.renderIconSettings(contents.icon);
    this.renderLicenseContent(contents.license);
    this.renderAboutContent(contents.about);
    const element = navContainer.querySelector(".nav-tab");
    if (element instanceof HTMLElement) {
      element.click();
    }
  }
  // 渲染图标设置
  renderIconSettings(container) {
    const iconSettingsContainer = container.createDiv("icon-settings-container");
    new import_obsidian.Setting(iconSettingsContainer).setName("\u542F\u7528 Callout Prism \u6837\u5F0F").setDesc("\u662F\u5426\u542F\u7528 Prism \u6837\u5F0F\u7F8E\u5316 Callout").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.usePrismStyle).onChange(async (value) => {
        this.plugin.settings.usePrismStyle = value;
        await this.plugin.saveSettings();
        this.plugin.togglePrismStyle(value);
      });
    });
    new import_obsidian.Setting(iconSettingsContainer).setName("\u5F53\u524D\u56FE\u6807\u6837\u5F0F").setDesc("\u9009\u62E9\u8981\u4F7F\u7528\u7684\u56FE\u6807\u6837\u5F0F").addDropdown((dropdown) => {
      const icons = {
        1: "\u6837\u5F0F1",
        2: "\u6837\u5F0F2",
        3: "\u6837\u5F0F3",
        4: "\u6837\u5F0F4",
        5: "\u6837\u5F0F5"
      };
      Object.entries(icons).forEach(([value, name]) => {
        dropdown.addOption(value, name);
      });
      dropdown.setValue(this.plugin.settings.iconSettings.type.toString());
      dropdown.onChange(async (value) => {
        this.plugin.settings.iconSettings.type = parseInt(value);
        await this.plugin.saveSettings();
        this.plugin.refreshAllIcons();
        updatePreview();
      });
    });
    new import_obsidian.Setting(iconSettingsContainer).setName("\u56FE\u6807\u5927\u5C0F").setDesc("\u8C03\u6574\u56FE\u6807\u7684\u5927\u5C0F\uFF08\u50CF\u7D20\uFF09").addSlider((slider) => {
      slider.setLimits(16, 48, 2).setValue(this.plugin.settings.iconSettings.size).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.iconSettings.size = value;
        await this.plugin.saveSettings();
        this.plugin.refreshAllIcons();
        updatePreview();
      });
    });
    const positionContainer = iconSettingsContainer.createDiv("position-settings");
    positionContainer.createEl("h4", { text: "\u56FE\u6807\u4F4D\u7F6E\u8C03\u6574", cls: "setting-category" });
    new import_obsidian.Setting(positionContainer).setName("\u9876\u90E8\u95F4\u8DDD").setDesc("\u8C03\u6574\u56FE\u6807\u8DDD\u79BB\u9876\u90E8\u7684\u8DDD\u79BB\uFF08\u50CF\u7D20\uFF09").addSlider((slider) => {
      slider.setLimits(0, 32, 2).setValue(this.plugin.settings.iconSettings.position.top).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.iconSettings.position.top = value;
        await this.plugin.saveSettings();
        this.plugin.refreshAllIcons();
        updatePreview();
      });
    });
    new import_obsidian.Setting(positionContainer).setName("\u53F3\u4FA7\u95F4\u8DDD").setDesc("\u8C03\u6574\u56FE\u6807\u8DDD\u79BB\u53F3\u4FA7\u7684\u8DDD\u79BB\uFF08\u50CF\u7D20\uFF09").addSlider((slider) => {
      slider.setLimits(8, 100, 2).setValue(this.plugin.settings.iconSettings.position.right).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.iconSettings.position.right = value;
        await this.plugin.saveSettings();
        this.plugin.refreshAllIcons();
        updatePreview();
      });
    });
    const previewContainer = iconSettingsContainer.createDiv("icon-preview-container");
    previewContainer.createEl("h4", { text: "\u56FE\u6807\u9884\u89C8", cls: "setting-category" });
    const calloutPreview = previewContainer.createDiv("callout");
    calloutPreview.addClass("callout");
    calloutPreview.style.position = "relative";
    calloutPreview.style.margin = "10px 0";
    calloutPreview.style.setProperty("--icon-size", `${this.plugin.settings.iconSettings.size}px`);
    calloutPreview.style.setProperty("--icon-top-position", `${this.plugin.settings.iconSettings.position.top}px`);
    calloutPreview.style.setProperty("--icon-right-position", `${this.plugin.settings.iconSettings.position.right}px`);
    const calloutTitle = calloutPreview.createDiv("callout-title");
    calloutTitle.innerHTML = '<div class="callout-title-inner">\u9884\u89C8 Callout</div>';
    const calloutContent = calloutPreview.createDiv("callout-content");
    calloutContent.innerHTML = "\u8FD9\u662F\u4E00\u4E2A\u7528\u4E8E\u9884\u89C8\u56FE\u6807\u6837\u5F0F\u7684 Callout";
    const iconContainer = document.createElement("div");
    iconContainer.className = "callout-message-icon-container";
    const icon = document.createElement("div");
    icon.className = "callout-message-icon";
    icon.innerHTML = this.plugin.getIconSvg(this.plugin.settings.iconSettings.type);
    icon.style.width = `${this.plugin.settings.iconSettings.size}px`;
    icon.style.height = `${this.plugin.settings.iconSettings.size}px`;
    iconContainer.style.top = `${this.plugin.settings.iconSettings.position.top}px`;
    iconContainer.style.right = `${this.plugin.settings.iconSettings.position.right}px`;
    const countSpan = document.createElement("span");
    countSpan.className = "callout-message-count";
    countSpan.textContent = "0";
    iconContainer.appendChild(icon);
    iconContainer.appendChild(countSpan);
    calloutPreview.appendChild(iconContainer);
    const updatePreview = () => {
      calloutPreview.style.setProperty("--icon-size", `${this.plugin.settings.iconSettings.size}px`);
      calloutPreview.style.setProperty("--icon-top-position", `${this.plugin.settings.iconSettings.position.top}px`);
      calloutPreview.style.setProperty("--icon-right-position", `${this.plugin.settings.iconSettings.position.right}px`);
      icon.style.width = `${this.plugin.settings.iconSettings.size}px`;
      icon.style.height = `${this.plugin.settings.iconSettings.size}px`;
      iconContainer.style.top = `${this.plugin.settings.iconSettings.position.top}px`;
      iconContainer.style.right = `${this.plugin.settings.iconSettings.position.right}px`;
      icon.innerHTML = this.plugin.getIconSvg(this.plugin.settings.iconSettings.type);
    };
    return updatePreview;
  }
  updatePreviewIcon(iconElement) {
    const iconType = this.plugin.settings.iconSettings.type;
    iconElement.empty();
    switch (iconType) {
      case 1:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#4A90E2"><path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z"/></svg>`;
        break;
      case 2:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#2ECC71"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>`;
        break;
      case 3:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#FF69B4"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/></svg>`;
        break;
      case 4:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#FF9800"><circle cx="12" cy="12" r="10"/></svg>`;
        break;
      case 5:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#9E9E9E"><rect x="3" y="3" width="18" height="18" rx="2"/></svg>`;
        break;
    }
  }
  // 渲染授权内容
  renderLicenseContent(container) {
    const licenseHeader = container.createDiv("license-header");
    licenseHeader.createEl("h1", { text: "\u63D2\u4EF6\u6388\u6743" }).style.color = "#ff6b6b";
    const statusContainer = licenseHeader.createDiv("license-status-container");
    statusContainer.style.margin = "20px 0";
    statusContainer.style.padding = "15px";
    statusContainer.style.borderRadius = "8px";
    statusContainer.style.backgroundColor = this.plugin.settings.isActivated ? "#e8f5e9" : "#ffebee";
    statusContainer.style.border = `1px solid ${this.plugin.settings.isActivated ? "#4caf50" : "#f44336"}`;
    const statusIcon = statusContainer.createSpan("license-status-icon");
    statusIcon.setText(this.plugin.settings.isActivated ? "\u2705" : "\u274C");
    const statusText = statusContainer.createSpan("license-status-text");
    statusText.setText(this.plugin.settings.isActivated ? " \u5DF2\u6388\u6743\uFF0C\u8BF7\u91CD\u542F" : " \u672A\u6388\u6743");
    statusText.style.marginLeft = "8px";
    statusText.style.color = this.plugin.settings.isActivated ? "#2e7d32" : "#c62828";
    const restartButton = statusContainer.createEl("button", {
      text: "\u91CD\u542F Obsidian",
      cls: "restart-obsidian-button"
    });
    restartButton.style.marginLeft = "20px";
    restartButton.style.padding = "4px 12px";
    restartButton.style.backgroundColor = "#4caf50";
    restartButton.style.color = "white";
    restartButton.style.border = "none";
    restartButton.style.borderRadius = "4px";
    restartButton.style.cursor = "pointer";
    restartButton.addEventListener("click", () => {
      const electron = require("electron");
      const window2 = electron.remote.getCurrentWindow();
      window2.reload();
    });
    const activationContainer = container.createDiv("license-activation-container");
    activationContainer.style.marginTop = "20px";
    activationContainer.style.padding = "20px";
    activationContainer.style.backgroundColor = "var(--background-secondary)";
    activationContainer.style.borderRadius = "8px";
    const inputContainer = activationContainer.createDiv("license-input-container");
    inputContainer.createEl("h3", { text: "\u8F93\u5165\u6FC0\u6D3B\u7801" });
    const input = inputContainer.createEl("input", {
      type: "text",
      placeholder: "\u8BF7\u8F93\u5165\u6FC0\u6D3B\u7801"
    });
    input.style.width = "100%";
    input.style.padding = "8px";
    input.style.marginTop = "10px";
    input.style.borderRadius = "4px";
    input.style.border = "1px solid var(--background-modifier-border)";
    input.value = this.plugin.settings.licenseKey;
    input.addEventListener("change", async (e) => {
      const target = e.target;
      this.plugin.settings.licenseKey = target.value;
      await this.plugin.saveSettings();
    });
    const activateButton = activationContainer.createEl("button", {
      text: "\u6FC0\u6D3B\u63D2\u4EF6",
      cls: "mod-cta"
    });
    activateButton.style.marginTop = "15px";
    activateButton.style.width = "100%";
    activateButton.addEventListener("click", async () => {
      const isValid = await this.plugin.validateLicense(this.plugin.settings.licenseKey);
      if (isValid) {
        this.plugin.settings.isActivated = true;
        await this.plugin.saveSettings();
        const restartContainer = activationContainer.createDiv("restart-container");
        restartContainer.style.marginTop = "20px";
        restartContainer.style.padding = "15px";
        restartContainer.style.backgroundColor = "#e8f5e9";
        restartContainer.style.borderRadius = "8px";
        restartContainer.style.border = "1px solid #4caf50";
        restartContainer.style.textAlign = "center";
        const restartText = restartContainer.createEl("p", {
          text: "\u6FC0\u6D3B\u6210\u529F\uFF01\u8BF7\u91CD\u542F Obsidian \u4EE5\u542F\u7528\u6240\u6709\u529F\u80FD\u3002"
        });
        restartText.style.margin = "0 0 15px 0";
        restartText.style.color = "#2e7d32";
        const restartButton2 = restartContainer.createEl("button", {
          text: "\u91CD\u542F Obsidian",
          cls: "mod-cta"
        });
        restartButton2.style.backgroundColor = "#4caf50";
        restartButton2.addEventListener("click", () => {
          const electron = require("electron");
          const window2 = electron.remote.getCurrentWindow();
          window2.reload();
        });
        new import_obsidian.Notice("\u6FC0\u6D3B\u6210\u529F\uFF01");
        this.display();
      } else {
        new import_obsidian.Notice("\u6FC0\u6D3B\u7801\u65E0\u6548\uFF01");
      }
    });
    const trialStatusContainer = activationContainer.createDiv("trial-status-container");
    trialStatusContainer.style.marginTop = "15px";
    trialStatusContainer.style.padding = "15px";
    trialStatusContainer.style.backgroundColor = "var(--background-primary)";
    trialStatusContainer.style.borderRadius = "8px";
    trialStatusContainer.style.border = "1px solid var(--background-modifier-border)";
    trialStatusContainer.style.position = "relative";
    if (this.plugin.settings.hasUsedTrial) {
      if (this.plugin.settings.trialEndTime && Date.now() < this.plugin.settings.trialEndTime) {
        const now = Date.now();
        const remainingTime = this.plugin.settings.trialEndTime - now;
        const remainingMinutes = Math.ceil(remainingTime / (1e3 * 60));
        const remainingSeconds = Math.ceil(remainingTime / 1e3);
        const timeContainer = trialStatusContainer.createDiv("trial-time-container");
        timeContainer.style.textAlign = "center";
        timeContainer.style.marginBottom = "10px";
        const timeDisplay = timeContainer.createEl("div", {
          text: `\u5269\u4F59\u8BD5\u7528\u65F6\u95F4\uFF1A${remainingMinutes}\u5206${remainingSeconds % 60}\u79D2`,
          cls: "trial-time-display"
        });
        timeDisplay.style.fontSize = "16px";
        timeDisplay.style.fontWeight = "bold";
        timeDisplay.style.color = "#4caf50";
        const progressContainer = trialStatusContainer.createDiv("trial-progress-container");
        progressContainer.style.height = "6px";
        progressContainer.style.backgroundColor = "#e0e0e0";
        progressContainer.style.borderRadius = "3px";
        progressContainer.style.overflow = "hidden";
        progressContainer.style.marginTop = "10px";
        const progress = progressContainer.createDiv("trial-progress");
        const percentage = remainingTime / (6 * 60 * 60 * 1e3) * 100;
        progress.style.width = `${percentage}%`;
        progress.style.height = "100%";
        progress.style.backgroundColor = "#4caf50";
        progress.style.transition = "width 1s linear";
        const updateTimer = setInterval(() => {
          const currentTime = Date.now();
          const newRemainingTime = this.plugin.settings.trialEndTime - currentTime;
          if (newRemainingTime <= 0) {
            clearInterval(updateTimer);
            this.display();
            return;
          }
          const newMinutes = Math.floor(newRemainingTime / (1e3 * 60));
          const newSeconds = Math.floor(newRemainingTime / 1e3 % 60);
          timeDisplay.textContent = `\u5269\u4F59\u8BD5\u7528\u65F6\u95F4\uFF1A${newMinutes}\u5206${newSeconds}\u79D2`;
          const newPercentage = newRemainingTime / (6 * 60 * 60 * 1e3) * 100;
          progress.style.width = `${newPercentage}%`;
        }, 1e3);
        this.register(() => clearInterval(updateTimer));
      } else {
        const statusText2 = trialStatusContainer.createEl("div", {
          text: "\u8BD5\u7528\u5DF2\u7ED3\u675F\uFF0C\u5378\u8F7D\u63D2\u4EF6\u5E76\u91CD\u65B0\u5B89\u88C5\u53EF\u91CD\u65B0\u83B7\u5F97\u8BD5\u7528\u673A\u4F1A",
          cls: "trial-status-text"
        });
        statusText2.style.color = "#f44336";
        statusText2.style.textAlign = "center";
        statusText2.style.fontWeight = "bold";
      }
    } else {
      const statusText2 = trialStatusContainer.createEl("div", {
        text: "\u672A\u5F00\u59CB\u8BD5\u7528\uFF08\u5378\u8F7D\u91CD\u88C5\u53EF\u91CD\u65B0\u83B7\u5F97\u8BD5\u7528\u673A\u4F1A\uFF09",
        cls: "trial-status-text"
      });
      statusText2.style.color = "var(--text-muted)";
      statusText2.style.textAlign = "center";
    }
    const trialButton = activationContainer.createEl("button", {
      text: "\u63D2\u4EF6\u8BD5\u7528",
      cls: "mod-cta"
    });
    trialButton.style.width = "100%";
    trialButton.style.marginTop = "15px";
    trialButton.style.backgroundColor = "#4caf50";
    trialButton.style.color = "#ffffff";
    trialButton.style.padding = "8px";
    trialButton.style.borderRadius = "4px";
    trialButton.style.cursor = "pointer";
    trialButton.style.border = "none";
    trialButton.style.fontSize = "14px";
    trialButton.style.fontWeight = "bold";
    trialButton.addEventListener("click", async () => {
      if (this.plugin.settings.hasUsedTrial) {
        new import_obsidian.Notice("\u8BD5\u7528\u673A\u4F1A\u5DF2\u7528\u5B8C\uFF0C\u8BF7\u6FC0\u6D3B\u63D2\u4EF6\u7EE7\u7EED\u4F7F\u7528\uFF01");
        return;
      }
      const startTime = Date.now();
      const endTime = startTime + 6 * 60 * 60 * 1e3;
      this.plugin.settings.trialEndTime = endTime;
      this.plugin.settings.hasUsedTrial = true;
      await this.plugin.saveSettings();
      await this.plugin.onunload();
      await this.plugin.onload();
      new import_obsidian.Notice("\u5DF2\u5F00\u542F6\u5C0F\u65F6\u8BD5\u7528\u671F\uFF01\u6240\u6709\u529F\u80FD\u5DF2\u542F\u7528");
      this.display();
      const checkTrialInterval = setInterval(async () => {
        const now = Date.now();
        if (now >= endTime) {
          clearInterval(checkTrialInterval);
          await this.plugin.onunload();
          this.plugin.disablePluginFeatures();
          new import_obsidian.Notice("\u8BD5\u7528\u671F\u5DF2\u7ED3\u675F\uFF0C\u8BF7\u6FC0\u6D3B\u63D2\u4EF6\u7EE7\u7EED\u4F7F\u7528\uFF01");
          this.display();
        }
      }, 1e3);
      this.register(() => clearInterval(checkTrialInterval));
    });
  }
  // 修改 renderAboutContent 方法
  renderAboutContent(container) {
    container.createEl("h1", { text: "\u5173\u4E8E\u63D2\u4EF6" }).style.color = "#ff6b6b";
    const descriptionContainer = container.createEl("div");
    descriptionContainer.createEl("span", {
      text: "\u8FD9\u662F\u4E00\u4E2A\u7528\u4E8E\u5728 Obsidian \u4E2D\u4E3A Callout \u6DFB\u52A0\u989D\u5916\u5907\u6CE8\u529F\u80FD\u7684\u63D2\u4EF6\uFF0C"
    });
    const warningText = descriptionContainer.createEl("span", {
      text: '\uFFFD\uFFFD\uFFFD\u6CE8\u610F\u8BE5\u63D2\u4EF6\u5BF9\u4E8ECallout\u7B14\u8BB0\u7C7B\u5B58\u5728\u8F83\u5927\u7684HTML"\u7B14\u8BB0\u6C61\u67D3"\uFF0C\u4F7F\u7528\u524D\u8BF7\u77E5\u6089\u3002'
    });
    warningText.style.color = "#ff0000";
    container.createEl("p", { text: "\u7248\u672C: 1.2.0" });
    container.createEl("p", { text: "\u4F5C\u8005: \u4E00\u624B\u70C2\u724C\u6253\u5F97\u7A00\u70C2" });
    const hr1 = container.createEl("hr");
    hr1.style.margin = "20px 0";
    const followTitle = container.createEl("h1", { text: "\u6B22\u8FCE\u6CE8" });
    followTitle.style.color = "#4169E1";
    const bilibiliLink = container.createEl("a", {
      text: "B\u7AD9: \u4E00\u624B\u70C2\u724C\u6253\u5F97\u7A00\u70C2",
      href: "https://space.bilibili.com/397511870?spm_id_from=333.1365.0.0"
    });
    bilibiliLink.style.color = "#00A1D6";
    bilibiliLink.style.display = "block";
    bilibiliLink.style.marginBottom = "10px";
    bilibiliLink.style.textDecoration = "underline";
    bilibiliLink.style.textUnderlineOffset = "2px";
    bilibiliLink.style.cursor = "pointer";
    const xiaohongshuLink = container.createEl("a", {
      text: "\u5C0F\u7EA2\u4E66: \u4E00\u624B\u70C2\u724C\u6253\u5F97\u7A00\u70C2",
      href: "https://www.xiaohongshu.com/user/profile/6377b528000000001f01e2ef"
    });
    xiaohongshuLink.style.color = "#FE2C55";
    xiaohongshuLink.style.display = "block";
    xiaohongshuLink.style.marginBottom = "20px";
    xiaohongshuLink.style.textDecoration = "underline";
    xiaohongshuLink.style.textUnderlineOffset = "2px";
    xiaohongshuLink.style.cursor = "pointer";
    const img = container.createEl("img", {
      attr: {
        src: "https://zhangjiangchong.oss-cn-chengdu.aliyuncs.com/2.png",
        alt: "\u5173\u6CE8\u4E8C\u7EF4\u7801"
      }
    });
    img.style.maxWidth = "100%";
    img.style.height = "auto";
    img.style.display = "block";
    img.style.margin = "10px auto";
    const hr2 = container.createEl("hr");
    hr2.style.margin = "20px 0";
    const sponsorTitle = container.createEl("h1", { text: "\u8D5E\u52A9\u652F\u6301" });
    sponsorTitle.style.color = "#4169E1";
    const trialText = container.createEl("p", {
      text: "\u6B64\u63D2\u4EF6\u5141\u8BB8\u767D\u5AD6\uFF0C\u8BD5\u7528\u65F6\u95F4\u7ED3\u675F\u4EE5\u540E\uFF0C\u91CD\u65B0\u5B89\u88C5\u63D2\u4EF6\u5373\u53EF\u7EE7\u7EED\u8BD5\u7528"
    });
    trialText.style.textAlign = "center";
    trialText.style.margin = "10px 0";
    trialText.style.color = "#666666";
    trialText.style.fontSize = "0.9em";
    const sponsorText = container.createEl("p", {
      text: "\u8BF7\u4F5C\u8005\u559D\u4E00\u74F6\u77FF\u6CC9\u6C34"
    });
    sponsorText.style.textAlign = "center";
    sponsorText.style.margin = "10px 0";
    const sponsorImg = container.createEl("img", {
      attr: {
        src: "https://zhangjiangchong.oss-cn-chengdu.aliyuncs.com/20241204142159.png",
        alt: "\u8D5E\u52A9\u4E8C\u7EF4\u7801"
      }
    });
    sponsorImg.style.maxWidth = "100%";
    sponsorImg.style.height = "auto";
    sponsorImg.style.display = "block";
    sponsorImg.style.margin = "10px auto";
  }
  // 添加场景渲染相关的方法
  renderScenes() {
    this.renderSceneTabs();
    this.renderCurrentSceneContent();
    this.updateSceneDropdowns();
  }
  // 渲染场景标签
  renderSceneTabs() {
    if (!this.sceneTabContainer)
      return;
    const addButton = this.sceneTabContainer.querySelector(".scene-tab-button");
    this.sceneTabContainer.empty();
    if (addButton)
      this.sceneTabContainer.appendChild(addButton);
    this.plugin.settings.scenes.forEach((scene) => {
      const tabContainer = this.createSceneTab(scene);
      this.sceneTabContainer.appendChild(tabContainer);
    });
  }
  // 创建单个场景标签
  createSceneTab(scene) {
    const tabContainer = createEl("div", { cls: "scene-tab-container" });
    tabContainer.style.display = "flex";
    tabContainer.style.alignItems = "center";
    tabContainer.style.gap = "4px";
    const editButton = tabContainer.createEl("button", {
      text: "\u270E",
      cls: "scene-tab-edit"
    });
    editButton.style.padding = "4px 8px";
    editButton.style.cursor = "pointer";
    editButton.style.border = "none";
    editButton.style.borderRadius = "4px";
    editButton.style.backgroundColor = "transparent";
    const sceneTab = tabContainer.createEl("button", {
      text: scene.name,
      cls: "scene-tab"
    });
    if (scene.id === this.plugin.settings.currentSceneId) {
      sceneTab.addClass("scene-tab-active");
    }
    if (scene.id !== "default") {
      const deleteButton = this.createSceneDeleteButton(scene);
      tabContainer.appendChild(deleteButton);
    }
    editButton.onclick = (e) => {
      e.stopPropagation();
      this.showSceneNameEditModal(scene);
    };
    sceneTab.onclick = async () => {
      this.plugin.settings.currentSceneId = scene.id;
      await this.plugin.saveSettings();
      this.renderScenes();
    };
    return tabContainer;
  }
  // 创建场景删除按钮
  createSceneDeleteButton(scene) {
    const deleteButton = createEl("button", {
      text: "\xD7",
      cls: "scene-tab-delete"
    });
    deleteButton.onclick = async (e) => {
      e.stopPropagation();
      if (this.plugin.settings.scenes.length <= 1) {
        new import_obsidian.Notice("\u81F3\u5C11\u9700\u8981\u4FDD\u7559\u4E00\u4E2A\u573A\u666F");
        return;
      }
      this.plugin.settings.scenes = this.plugin.settings.scenes.filter((s) => s.id !== scene.id);
      if (this.plugin.settings.currentSceneId === scene.id) {
        this.plugin.settings.currentSceneId = this.plugin.settings.scenes[0].id;
      }
      await this.plugin.saveSettings();
      this.renderScenes();
      new import_obsidian.Notice(`\u5DF2\u5220\u9664\u573A\u666F\uFF1A${scene.name}`);
    };
    return deleteButton;
  }
  // 渲染当前场景内容
  renderCurrentSceneContent() {
    if (!this.sceneContentContainer)
      return;
    const currentScene = this.plugin.settings.scenes.find(
      (scene) => scene.id === this.plugin.settings.currentSceneId
    );
    if (!currentScene)
      return;
    this.sceneContentContainer.empty();
    const sceneActionsContainer = this.sceneContentContainer.createDiv("scene-actions-container");
    sceneActionsContainer.style.marginBottom = "20px";
    const addCalloutButton = this.sceneContentContainer.createEl("button", {
      text: "\u6DFB\u52A0\u65B0\u7684\u7B14\u8BB0\u578B",
      cls: "mod-cta"
    });
    addCalloutButton.style.marginTop = "20px";
    addCalloutButton.style.width = "100%";
    addCalloutButton.style.marginBottom = "20px";
    const copyFromButton = sceneActionsContainer.createEl("button", {
      text: "\u4ECE\u5176\u4ED6\u573A\u666F\u590D\u5236\u914D\u7F6E",
      cls: "mod-cta"
    });
    copyFromButton.style.marginBottom = "20px";
    copyFromButton.onclick = () => {
      const modal = new SceneCopyModal(this.app, this.plugin, currentScene, async (sourceSceneId) => {
        const sourceScene = this.plugin.settings.scenes.find((s) => s.id === sourceSceneId);
        if (sourceScene) {
          currentScene.callouts = JSON.parse(JSON.stringify(sourceScene.callouts));
          await this.plugin.saveSettings();
          this.renderCurrentSceneContent();
        }
      });
      modal.open();
    };
    addCalloutButton.onclick = async () => {
      const newCallout = {
        type: "note",
        color: "#808080",
        name: `\u7B14\u8BB0\u7C7B\u578B${currentScene.callouts.length + 1}`,
        textColor: "#000000",
        backgroundColor: "#ffffff"
      };
      currentScene.callouts.push(newCallout);
      await this.plugin.saveSettings();
      this.renderCurrentSceneContent();
    };
    currentScene.callouts.forEach((callout, index) => {
      if (index > 0) {
        const hr = this.sceneContentContainer.createEl("hr");
        hr.style.margin = "20px 0";
      }
      const calloutContainer = this.sceneContentContainer.createDiv("callout-setting-container");
      calloutContainer.style.backgroundColor = "var(--background-secondary)";
      calloutContainer.style.padding = "15px";
      calloutContainer.style.borderRadius = "8px";
      calloutContainer.style.marginBottom = "20px";
      const headerContainer = calloutContainer.createDiv("callout-header");
      headerContainer.style.display = "flex";
      headerContainer.style.justifyContent = "space-between";
      headerContainer.style.alignItems = "center";
      headerContainer.style.marginBottom = "15px";
      headerContainer.createEl("h3", {
        text: `\u7B14\u8BB0\u7C7B\u578B${index + 1}`,
        cls: "callout-header-title"
      });
      if (index > 0) {
        const deleteButton = headerContainer.createEl("button", {
          text: "\u5220\u9664",
          cls: "mod-warning"
        });
        deleteButton.onclick = async () => {
          currentScene.callouts = currentScene.callouts.filter((_, i) => i !== index);
          await this.plugin.saveSettings();
          this.renderCurrentSceneContent();
        };
      }
      this.addCalloutSettings(calloutContainer, callout);
    });
  }
  // 添加 Callout 设置
  addCalloutSettings(container, callout) {
    new import_obsidian.Setting(container).setName("\u6587\u5B57\u989C\u8272").setDesc("\u8BBE\u7F6E\u6587\u5B57\u7684\u989C\u8272").addText((text) => text.setValue(callout.textColor).setPlaceholder("#000000").then((textComponent) => {
      const colorPicker = createEl("input", {
        type: "color",
        value: callout.textColor
      });
      colorPicker.style.marginRight = "8px";
      textComponent.inputEl.before(colorPicker);
      colorPicker.oninput = (e) => {
        const target = e.target;
        textComponent.setValue(target.value);
        callout.textColor = target.value;
        this.plugin.saveSettings();
      };
      textComponent.inputEl.oninput = (e) => {
        const target = e.target;
        colorPicker.value = target.value;
      };
    }).onChange(async (value) => {
      callout.textColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(container).setName("Callout \u989C\u8272").setDesc("\u8BBE\u7F6E Callout \u7684\u989C\u8272").addText((text) => text.setValue(callout.color).setPlaceholder("#000000").then((textComponent) => {
      const colorPicker = createEl("input", {
        type: "color",
        value: callout.color
      });
      colorPicker.style.marginRight = "8px";
      textComponent.inputEl.before(colorPicker);
      colorPicker.oninput = (e) => {
        const target = e.target;
        textComponent.setValue(target.value);
        callout.color = target.value;
        this.plugin.saveSettings();
      };
      textComponent.inputEl.oninput = (e) => {
        const target = e.target;
        colorPicker.value = target.value;
      };
    }).onChange(async (value) => {
      callout.color = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(container).setName("Callout \u540D\u79F0").setDesc("\u8BBE\u7F6E Callout \u7684\u663E\u793A\u540D\u79F0").addText((text) => text.setValue(callout.name).setPlaceholder("\u9ED8\u8BA4").onChange(async (value) => {
      callout.name = value.trim() || "\u9ED8\u8BA4";
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(container).setName("Callout \u7C7B\u578B").setDesc("\u8BBE\u7F6E Callout \u7684\u7C7B\u578B\u6807\u8BC6").addText((text) => text.setValue(callout.type).setPlaceholder("note").onChange(async (value) => {
      callout.type = value.trim() || "note";
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(container).setName("\u80CC\u666F\u989C\u8272").setDesc("\u8BBE\u7F6E Callout \u7684\u80CC\u666F\u989C\u8272").addText((text) => text.setValue(callout.backgroundColor).setPlaceholder("#ffffff").then((textComponent) => {
      const colorPicker = createEl("input", {
        type: "color",
        value: callout.backgroundColor
      });
      colorPicker.style.marginRight = "8px";
      textComponent.inputEl.before(colorPicker);
      colorPicker.oninput = (e) => {
        const target = e.target;
        textComponent.setValue(target.value);
        callout.backgroundColor = target.value;
        this.plugin.saveSettings();
      };
      textComponent.inputEl.oninput = (e) => {
        const target = e.target;
        colorPicker.value = target.value;
      };
    }).onChange(async (value) => {
      callout.backgroundColor = value;
      await this.plugin.saveSettings();
    }));
  }
  // 添加新场景
  async addNewScene() {
    const newScene = {
      id: `scene-${Date.now()}`,
      name: `\u573A\u666F${this.plugin.settings.scenes.length + 1}`,
      // 确保使用正确的中文字符
      callouts: []
    };
    this.plugin.settings.scenes.push(newScene);
    this.plugin.settings.currentSceneId = newScene.id;
    await this.plugin.saveSettings();
    this.renderScenes();
  }
  // 更新场景下拉菜单
  updateSceneDropdowns() {
    if (this.sceneDropdown) {
      this.sceneDropdown.selectEl.empty();
      this.plugin.settings.scenes.forEach((scene) => {
        this.sceneDropdown.addOption(scene.id, scene.name);
      });
      this.sceneDropdown.setValue(this.plugin.settings.currentSceneId);
    }
  }
  showSceneNameEditModal(scene) {
    const modal = new SceneNameModal(this.app, scene.name, async (newName) => {
      scene.name = newName;
      await this.plugin.saveSettings();
      this.renderScenes();
      if (this.sceneDropdown) {
        this.updateSceneDropdowns();
      }
    });
    modal.open();
  }
  register(cleanup) {
    this.cleanupFunctions.push(cleanup);
  }
  // 在类的 hide 方法中清理
  hide() {
    this.cleanupFunctions.forEach((cleanup) => cleanup());
    this.cleanupFunctions = [];
  }
  renderBasicContent(container) {
    const sceneSelectContainer = container.createDiv("scene-select-container");
    sceneSelectContainer.style.marginTop = "24px";
    sceneSelectContainer.style.padding = "12px";
    sceneSelectContainer.style.backgroundColor = "var(--background-secondary)";
    sceneSelectContainer.style.borderRadius = "8px";
    sceneSelectContainer.createEl("h4", {
      text: "\u573A\u666F\u7BA1\u7406",
      cls: "setting-category"
    });
    this.sceneTabContainer = sceneSelectContainer.createDiv("scene-tabs");
    this.sceneTabContainer.style.display = "flex";
    this.sceneTabContainer.style.flexWrap = "wrap";
    this.sceneTabContainer.style.gap = "8px";
    this.sceneTabContainer.style.marginBottom = "16px";
    const addSceneButton = this.sceneTabContainer.createEl("button", {
      text: "+ \u65B0\u573A\u666F",
      cls: "scene-tab-button"
    });
    addSceneButton.addEventListener("click", () => this.addNewScene());
    new import_obsidian.Setting(sceneSelectContainer).setName("\u5F53\u524D\u5DE5\u4F5C\u573A\u666F").setDesc("\u9009\u62E9\u8981\u4F7F\u7528\u7684\u5DE5\u4F5C\u573A\u666F").addDropdown((dropdown) => {
      this.sceneDropdown = dropdown;
      this.plugin.settings.scenes.forEach((scene) => {
        dropdown.addOption(scene.id, scene.name);
      });
      dropdown.setValue(this.plugin.settings.currentSceneId);
      dropdown.onChange(async (value) => {
        this.plugin.settings.currentSceneId = value;
        await this.plugin.saveSettings();
        this.renderScenes();
      });
    });
    const globalIconContainer = container.createDiv("global-icon-settings-container");
    globalIconContainer.style.marginBottom = "24px";
    globalIconContainer.style.padding = "12px";
    globalIconContainer.style.backgroundColor = "var(--background-secondary)";
    globalIconContainer.style.borderRadius = "8px";
    globalIconContainer.createEl("h4", {
      text: "\u5168\u5C40\u56FE\u6807\u663E\u793A",
      cls: "setting-category"
    });
    new import_obsidian.Setting(globalIconContainer).setName("\u663E\u793A\u5168\u5C40\u56FE\u6807").setDesc("\u662F\u5426\u5728\u6240\u6709 Callout \u53F3\u4E0A\u89D2\u663E\u793A\u56FE\u6807").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showGlobalIcons).onChange(async (value) => {
        this.plugin.settings.showGlobalIcons = value;
        await this.plugin.saveSettings();
        if (this.plugin.updateAllOpenNotes) {
          this.plugin.updateAllOpenNotes();
        }
      });
    });
    const tipContainer = globalIconContainer.createDiv("global-icon-tip");
    tipContainer.style.marginTop = "12px";
    tipContainer.style.padding = "8px";
    tipContainer.style.backgroundColor = "var(--background-primary)";
    tipContainer.style.border = "1px solid var(--background-modifier-border)";
    tipContainer.style.borderRadius = "4px";
    tipContainer.style.fontSize = "0.9em";
    tipContainer.style.color = "var(--text-muted)";
    tipContainer.createEl("p", {
      text: '\u5C5E\u6027\u4E2D\u7684\u58F0\u660E\u4F18\u5148\u8BE5\u6309\u94AE\uFF0C\u5F53\u5F00\u542F\u5168\u5C40\u56FE\u6807\uFF0C\u4F60\u5728\u5C5E\u6027\u4E2D\u58F0\u660E\u5173\u95ED\uFF0CCallout\u53F3\u4E0A\u89D2\u7684\u56FE\u6807\u4E5F\u4F1A\u6D88\u5931\uFF0C\u53CD\u4E4B\u4EA6\u7136\u3002\u5C5E\u6027\u58F0\u660E\u5F62\u5982"Callout extra message display\uFF1AYes/No"\u3002'
    }).style.margin = "0";
    this.sceneContentContainer = sceneSelectContainer.createDiv("scene-content");
    this.sceneContentContainer.style.marginTop = "16px";
    this.renderScenes();
  }
  updatePreviewIcon(iconElement) {
    const iconType = this.plugin.settings.iconSettings.type;
    iconElement.empty();
    switch (iconType) {
      case 1:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#4A90E2"><path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z"/></svg>`;
        break;
      case 2:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#2ECC71"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>`;
        break;
      case 3:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#FF69B4"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/></svg>`;
        break;
      case 4:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#FF9800"><circle cx="12" cy="12" r="10"/></svg>`;
        break;
      case 5:
        iconElement.innerHTML = `<svg viewBox="0 0 24 24" fill="#9E9E9E"><rect x="3" y="3" width="18" height="18" rx="2"/></svg>`;
        break;
    }
  }
};
var CalloutSelectionModal = class extends import_obsidian.Modal {
  constructor(app, plugin, editor) {
    super(app);
    this.plugin = plugin;
    this.editor = editor;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("callout-selection-modal");
    contentEl.createEl("h2", { text: "\u9009\u62E9\u7B14\u8BB0\u7C7B\u578B" });
    const calloutList = contentEl.createDiv("callout-list");
    const currentScene = this.plugin.settings.scenes.find(
      (scene) => scene.id === this.plugin.settings.currentSceneId
    );
    if (!currentScene) {
      contentEl.createEl("p", { text: "\u627E\u4E0D\u5230\u573A\u666F\u914D\u7F6E" });
      return;
    }
    currentScene.callouts.forEach((callout, index) => {
      const calloutItem = calloutList.createDiv("callout-list-item");
      const preview = calloutItem.createDiv("callout-preview");
      preview.style.borderLeft = `4px solid ${callout.color}`;
      preview.style.backgroundColor = this.adjustColor(callout.color, 0.1);
      const title = preview.createEl("h3", { text: callout.name });
      title.style.color = callout.color;
      calloutItem.addEventListener("click", () => {
        this.transformToCallout(callout);
        this.close();
      });
      calloutItem.addEventListener("mouseenter", () => {
        calloutItem.addClass("callout-list-item-hover");
      });
      calloutItem.addEventListener("mouseleave", () => {
        calloutItem.removeClass("callout-list-item-hover");
      });
    });
  }
  // 修改 transformToCallout 方法，直接接受 callout 配置
  transformToCallout(callout) {
    const selection = this.editor.getSelection();
    if (!selection) {
      new import_obsidian.Notice("\u8BF7\u5148\u9009\u62E9\u8981\u8F6C\u6362\u7684\u6587\u672C");
      return;
    }
    const calloutId = `callout-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`;
    const formattedText = `> [!${callout.type}] **<font color="${callout.color}">${callout.name}</font>**
> <span style="background:${callout.backgroundColor}" data-callout-id="${calloutId}"><font color="${callout.textColor}">${selection}</font></span>

`;
    const cursor = this.editor.getCursor();
    this.editor.replaceSelection(formattedText);
    this.editor.setCursor({
      line: cursor.line + 3,
      ch: 0
    });
    new import_obsidian.Notice(`\u6587\u672C\u5DF2\u8F6C\u6362\u4E3A ${callout.name} \u683C\u5F0F\uFF01`);
  }
  adjustColor(color, opacity) {
    if (color.startsWith("#")) {
      const r = parseInt(color.slice(1, 3), 16);
      const g = parseInt(color.slice(3, 5), 16);
      const b = parseInt(color.slice(5, 7), 16);
      return `rgba(${r}, ${g}, ${b}, ${opacity})`;
    }
    return color;
  }
};
var SceneNameModal = class extends import_obsidian.Modal {
  constructor(app, currentName, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.nameInput = createEl("input", {
      type: "text",
      value: currentName
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("scene-name-modal");
    contentEl.createEl("h3", { text: "\u7F16\u8F91\u573A\u666F\u540D\u79F0" });
    this.nameInput.style.width = "100%";
    this.nameInput.style.marginBottom = "20px";
    contentEl.appendChild(this.nameInput);
    const buttonContainer = contentEl.createDiv("scene-name-modal-buttons");
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
    const saveButton = buttonContainer.createEl("button", {
      text: "\u4FDD\u5B58",
      cls: "mod-cta"
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6\u6D88"
    });
    saveButton.addEventListener("click", () => {
      const newName = this.nameInput.value.trim();
      if (newName) {
        this.onSubmit(newName);
        this.close();
      } else {
        new import_obsidian.Notice("\u573A\u666F\u540D\u79F0\u4E0D\u80FD\u4E3A\u7A7A");
      }
    });
    cancelButton.addEventListener("click", () => this.close());
  }
};
var SceneCopyModal = class extends import_obsidian.Modal {
  constructor(app, plugin, targetScene, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.targetScene = targetScene;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("scene-copy-modal");
    contentEl.createEl("h3", { text: "\u4ECE\u5176\u4ED6\u573A\u666F\u590D\u5236\u914D\u7F6E" });
    const sceneList = contentEl.createDiv("scene-copy-list");
    sceneList.style.marginTop = "20px";
    sceneList.style.marginBottom = "20px";
    this.plugin.settings.scenes.forEach((scene) => {
      if (scene.id !== this.targetScene.id) {
        const sceneItem = sceneList.createDiv("scene-copy-item");
        sceneItem.style.padding = "10px";
        sceneItem.style.cursor = "pointer";
        sceneItem.style.borderRadius = "4px";
        sceneItem.style.marginBottom = "8px";
        sceneItem.style.backgroundColor = "var(--background-secondary)";
        sceneItem.createEl("span", { text: scene.name });
        sceneItem.addEventListener("click", () => {
          this.onSubmit(scene.id);
          this.close();
        });
        sceneItem.addEventListener("mouseenter", () => {
          sceneItem.style.backgroundColor = "var(--background-modifier-hover)";
        });
        sceneItem.addEventListener("mouseleave", () => {
          sceneItem.style.backgroundColor = "var(--background-secondary)";
        });
      }
    });
    const cancelButton = contentEl.createEl("button", {
      text: "\u53D6\u6D88",
      cls: "scene-copy-cancel"
    });
    cancelButton.style.display = "block";
    cancelButton.style.marginLeft = "auto";
    cancelButton.addEventListener("click", () => this.close());
  }
};
//# sourceMappingURL=data:application/json;base64,
